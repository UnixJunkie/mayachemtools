.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "TorsionLibraryUtil 1"
.TH TorsionLibraryUtil 1 "2022-09-25" "perl v5.22.4" "MayaChemTools"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
TorsionLibraryUtil
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
import TorsionLibraryUtil
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBTorsionLibraryUtil\fR module provides the following functions:
.PP
CalculateTorsionAngleDifference, DoesSMARTSContainValidSubClassMappedAtoms,
DoesSMARTSContainValidTorsionRuleMappedAtoms, DoesSMARTSContainsMappedAtoms,
GetGenericHierarchyClassElementNode, IdentifyRotatableBondsForTorsionLibraryMatch,
IsSpecificHierarchyClass, ListTorsionLibraryInfo,
RemoveLastHierarchyClassElementNodeFromTracking,
RemoveLastHierarchySubClassElementNodeFromTracking, RetrieveTorsionLibraryInfo,
SetupHierarchyClassAndSubClassNamesForRotatableBond,
SetupHierarchySubClassElementPatternMol,
SetupTorsionLibraryInfoForMatchingRotatableBonds, SetupTorsionRuleAnglesInfo,
SetupTorsionRuleElementPatternMol, TrackHierarchyClassElementNode,
TrackHierarchySubClassElementNode
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.IP "\fBCalculateTorsionAngleDifference\fR" 4
.IX Item "CalculateTorsionAngleDifference"
.Vb 1
\&    CalculateTorsionAngleDifference(TorsionAngle1, TorsionAngle2)
.Ve
.Sp
Calculate torsion angle difference in the range from 0 to 180.
.Sp
\&\fIArguments:\fR
.Sp
.Vb 2
\&    TorsionAngle1 (float): First torsion angle.
\&    TorsionAngle2 (float): Second torsion angle.
.Ve
.Sp
\&\fIReturns:\fR
.Sp
.Vb 1
\&    float: Difference between first and second torsion angle.
.Ve
.IP "\fBDoesSMARTSContainValidSubClassMappedAtoms\fR" 4
.IX Item "DoesSMARTSContainValidSubClassMappedAtoms"
.Vb 1
\&    DoesSMARTSContainValidSubClassMappedAtoms(SMARTS)
.Ve
.Sp
Check for the presence of two central mapped atoms in \s-1SMARTS\s0 pattern.
A valid \s-1SMARTS\s0 pattern must contain only two mapped atoms corresponding
to map atom numbers ':2' and ':3'.
.Sp
\&\fIArguments:\fR
.Sp
.Vb 1
\&    SMARTS (str): SMARTS pattern for sub class in torsion library XML tree.
.Ve
.Sp
\&\fIReturns:\fR
.Sp
.Vb 1
\&    bool: True \- A valid pattern; Otherwise, false.
.Ve
.IP "\fBDoesSMARTSContainValidTorsionRuleMappedAtoms\fR" 4
.IX Item "DoesSMARTSContainValidTorsionRuleMappedAtoms"
.Vb 1
\&    DoesSMARTSContainValidTorsionRuleMappedAtoms(SMARTS)
.Ve
.Sp
Check for the presence of four mapped atoms in a \s-1SMARTS\s0 pattern.
A valid \s-1SMARTS\s0 pattern must contain only four mapped atoms corresponding
to map atom numbers ':1', ':2', ':3' and ':4'.
.Sp
\&\fIArguments:\fR
.Sp
.Vb 2
\&    SMARTS (str): SMARTS pattern for torsion rule in torsion library XML
\&        tree.
.Ve
.Sp
\&\fIReturns:\fR
.Sp
.Vb 1
\&    bool: True \- A valid pattern; Otherwise, false.
.Ve
.IP "\fBDoesSMARTSContainsMappedAtoms\fR" 4
.IX Item "DoesSMARTSContainsMappedAtoms"
.Vb 1
\&    DoesSMARTSContainsMappedAtoms(SMARTS, MappedAtomNumsList)
.Ve
.Sp
Check for the presence of specified mapped atoms in \s-1SMARTS\s0 pattern.
The mapped atom numbers in the list are specified as ':1', ':2', ':3' etc.
.Sp
\&\fIArguments:\fR
.Sp
.Vb 2
\&    SMARTS (str): SMARTS pattern in torsion library XML tree.
\&    MappedAtoms (list): Mapped atom numbers as ":1", ":2" etc.
.Ve
.Sp
\&\fIReturns:\fR
.Sp
.Vb 1
\&    bool: True \- All mapped atoms present in pattern; Otherwise, false.
.Ve
.IP "\fBGetGenericHierarchyClassElementNode\fR" 4
.IX Item "GetGenericHierarchyClassElementNode"
.Vb 1
\&    GetGenericHierarchyClassElementNode(TorsionLibraryInfo)
.Ve
.Sp
Get generic hierarchy class element node.
.Sp
\&\fIArguments:\fR
.Sp
.Vb 2
\&    TorsionLibraryInfo (dict): A dictionary containing information for
\&        matching rotatable bonds.
.Ve
.Sp
\&\fIReturns:\fR
.Sp
.Vb 2
\&    object: Generic hierarchy class element node in torsion library XML
\&        tree.
.Ve
.IP "\fBIdentifyRotatableBondsForTorsionLibraryMatch\fR" 4
.IX Item "IdentifyRotatableBondsForTorsionLibraryMatch"
.Vb 1
\&    IdentifyRotatableBondsForTorsionLibraryMatch(TorsionLibraryInfo, Mol, RotBondsPatternMol)
.Ve
.Sp
Identify rotatable bonds in a molecule for torsion library match.
.Sp
\&\fIArguments:\fR
.Sp
.Vb 5
\&    TorsionLibraryInfo (dict): A dictionary containing information for
\&        matching rotatable bonds.
\&    Mol (object): RDKit molecule object.
\&    RotBondsPatternMol (object): RDKit molecule object for SMARTS pattern
\&        corresponding to rotatable bonds.
.Ve
.Sp
\&\fIReturns:\fR
.Sp
.Vb 4
\&    bool: True \- Rotatable bonds present in molecule; Otherwise, false.
\&    None or dict: None \- For no rotatable bonds in molecule; otherwise, a
\&        dictionary containing the following informations for rotatable bonds
\&        matched to RotBondsPatternMol:
\&            
\&            RotBondsInfo["IDs"] = []
\&            RotBondsInfo["AtomIndices"] = {}
\&            RotBondsInfo["HierarchyClass"] = {}
.Ve
.IP "\fBIsSpecificHierarchyClass\fR" 4
.IX Item "IsSpecificHierarchyClass"
.Vb 1
\&    IsSpecificHierarchyClass(TorsionLibraryInfo, HierarchyClass)
.Ve
.Sp
Check whether it's a specific hierarchy class.
.Sp
\&\fIArguments:\fR
.Sp
.Vb 3
\&    TorsionLibraryInfo (dict): A dictionary containing information for
\&        matching rotatable bonds.
\&    HierarchyClass (str): Hierarchy class name.
.Ve
.Sp
\&\fIReturns:\fR
.Sp
.Vb 1
\&    bool: True \- A valid hierarchy class name; Otherwise, false.
.Ve
.IP "\fBListTorsionLibraryInfo\fR" 4
.IX Item "ListTorsionLibraryInfo"
.Vb 1
\&    ListTorsionLibraryInfo(TorsionLibElementTree)
.Ve
.Sp
List torsion library information using \s-1XML\s0 tree object. The following
information is listed:
.Sp
Summary:
.Sp
.Vb 3
\&    Total number of HierarchyClass nodes: <Number>
\&    Total number of HierarchyClassSubClass nodes: <Number
\&    Total number of TorsionRule nodes: <Number
.Ve
.Sp
Details:
.Sp
.Vb 3
\&    HierarchyClass: <Name>; HierarchySubClass nodes: <Number>;
\&        TorsionRule nodes: <SMARTS>
\&     ... ... ...
.Ve
.Sp
\&\fIArguments:\fR
.Sp
.Vb 1
\&    TorsionLibElementTree (object): XML tree object.
.Ve
.Sp
\&\fIReturns:\fR
.Sp
.Vb 1
\&    Nothing.
.Ve
.IP "\fBRemoveLastHierarchyClassElementNodeFromTracking\fR" 4
.IX Item "RemoveLastHierarchyClassElementNodeFromTracking"
.Vb 1
\&    RemoveLastHierarchyClassElementNodeFromTracking(TorsionLibraryInfo)
.Ve
.Sp
Remove last hierarchy class element node from tracking by removing it
from a stack.
.Sp
\&\fIArguments:\fR
.Sp
.Vb 2
\&    TorsionLibraryInfo (dict): A dictionary containing information for
\&        matching rotatable bonds.
.Ve
.Sp
\&\fIReturns:\fR
.Sp
.Vb 1
\&    Nothing. The torsion library info is updated.
.Ve
.IP "\fBRemoveLastHierarchySubClassElementNodeFromTracking\fR" 4
.IX Item "RemoveLastHierarchySubClassElementNodeFromTracking"
.Vb 1
\&    RemoveLastHierarchySubClassElementNodeFromTracking(TorsionLibraryInfo)
.Ve
.Sp
Remove last hierarchy sub class element node from tracking by removing it
from a stack.
.Sp
\&\fIArguments:\fR
.Sp
.Vb 2
\&    TorsionLibraryInfo (dict): A dictionary containing information for
\&        matching rotatable bonds.
.Ve
.Sp
\&\fIReturns:\fR
.Sp
.Vb 1
\&    Nothing. The torsion library info is updated.
.Ve
.IP "\fBRetrieveTorsionLibraryInfo\fR" 4
.IX Item "RetrieveTorsionLibraryInfo"
.Vb 1
\&    RetrieveTorsionLibraryInfo(TorsionLibraryFilePath, Quiet = True)
.Ve
.Sp
Retrieve torsion library information.
.Sp
\&\fIArguments:\fR
.Sp
.Vb 1
\&    TorsionLibraryFilePath (str):  Torsion library XML file path.
.Ve
.Sp
\&\fIReturns:\fR
.Sp
.Vb 1
\&    object: An object returned by xml.etree.ElementTree.parse function.
.Ve
.Sp
The \s-1XML\s0 file is parsed using xml.etree.ElementTree.parse function and
object created by the parse function is simply returned.
.IP "\fBSetupHierarchyClassAndSubClassNamesForRotatableBond\fR" 4
.IX Item "SetupHierarchyClassAndSubClassNamesForRotatableBond"
.Vb 1
\&    SetupHierarchyClassAndSubClassNamesForRotatableBond(TorsionLibraryInfo)
\&
\& Setup hierarchy class and subclass names for a rotatable bond matched to
\&a torsion rule element node.
.Ve
.Sp
\&\fIReturns:\fR
.Sp
.Vb 2
\&    TorsionLibraryInfo (dict): A dictionary containing information for
\&        matching rotatable bonds.
\&
\&    str: A back slash delimited string containing hierarchy class names at
\&        the level of torsion rule element node.
\&    str: A back slash delimited string containing hierarchy sub class names
\&      at the level of torsion rule element node.
.Ve
.IP "\fBSetupHierarchySubClassElementPatternMol\fR" 4
.IX Item "SetupHierarchySubClassElementPatternMol"
.Vb 1
\&    SetupHierarchySubClassElementPatternMol(TorsionLibraryInfo, ElementNode)
.Ve
.Sp
Setup pattern molecule for \s-1SMARTS\s0 pattern in hierarchy subclass element.
.Sp
\&\fIArguments:\fR
.Sp
.Vb 4
\&    TorsionLibraryInfo (dict): A dictionary containing information for
\&        matching rotatable bonds.
\&    ElementNode (object): A hierarchy sub class element node being matched
\&       in torsion library XML tree.
.Ve
.Sp
\&\fIReturns:\fR
.Sp
.Vb 2
\&    object: RDKit molecule object corresponding to SMARTS pattern for
\&        hierarchy sub class element node.
.Ve
.IP "\fBSetupTorsionLibraryInfoForMatchingRotatableBonds\fR" 4
.IX Item "SetupTorsionLibraryInfoForMatchingRotatableBonds"
.Vb 1
\&    SetupTorsionLibraryInfoForMatchingRotatableBonds(TorsionLibraryInfo)
.Ve
.Sp
Setup torsion  library information for matching rotatable bonds. The
following information is initialized and updated in torsion library
dictionary for matching rotatable bonds:
.Sp
.Vb 2
\&    TorsionLibraryInfo["GenericClass"] = None
\&    TorsionLibraryInfo["GenericClassElementNode"] = None
\&    
\&    TorsionLibraryInfo["SpecificClasses"] = {}
\&    TorsionLibraryInfo["SpecificClasses"]["Names"] = []
\&    TorsionLibraryInfo["SpecificClasses"]["ElementNode"] = {}
\&    
\&    TorsionLibraryInfo["HierarchyClassNodes"] = []
\&    TorsionLibraryInfo["HierarchySubClassNodes"] = []
\&    
\&    TorsionLibraryInfo["DataCache"] = {}
\&    TorsionLibraryInfo["DataCache"]["SubClassPatternMol"] = {}
\&    
\&    TorsionLibraryInfo["DataCache"]["TorsionRulePatternMol"] = {}
\&    TorsionLibraryInfo["DataCache"]["TorsionRuleAnglesInfo"] = {}
.Ve
.Sp
\&\fIArguments:\fR
.Sp
.Vb 2
\&    TorsionLibraryInfo (dict): A dictionary containing root node for
\&        torsion library element tree.
.Ve
.Sp
\&\fIReturns:\fR
.Sp
.Vb 1
\&    Nonthing. The torsion library information dictionary is updated.
.Ve
.IP "\fBSetupTorsionRuleAnglesInfo\fR" 4
.IX Item "SetupTorsionRuleAnglesInfo"
.Vb 1
\&    SetupTorsionRuleAnglesInfo(TorsionLibraryInfo, TorsionRuleElementNode)
.Ve
.Sp
Setup torsion angles and energy info for matching a torsion rule.
.Sp
\&\fIArguments:\fR
.Sp
.Vb 4
\&    TorsionLibraryInfo (dict): A dictionary containing information for
\&        matching rotatable bonds.
\&    TorsionRuleElementNode (object): A torsion rule element node being
\&       matched in torsion library XML tree.
.Ve
.Sp
\&\fIReturns:\fR
.Sp
.Vb 2
\&    dict: A dictionary containing the following information for torsion rule
\&        being matched to a rotatable bond:
\&            
\&        RuleAnglesInfo = {}
\&        
\&        RuleAnglesInfo["IDs"] = []
\&        RuleAnglesInfo["Value"] = {}
\&        RuleAnglesInfo["Score"] = {}
\&        RuleAnglesInfo["Tolerance1"] = {}
\&        RuleAnglesInfo["Tolerance2"] = {}
\&        
\&        RuleAnglesInfo["ValuesList"] = []
\&        RuleAnglesInfo["ValuesIn360RangeList"] = []
\&        RuleAnglesInfo["Tolerances1List"] = []
\&        RuleAnglesInfo["Tolerances2List"] = []
\&         
\&        # Strain energy calculations...
\&        RuleAnglesInfo["EnergyMethod"] = None
\&        RuleAnglesInfo["EnergyMethodExact"] = None
\&        RuleAnglesInfo["EnergyMethodApproximate"] = None
\&        
\&        # For approximate strain energy calculation...
\&        RuleAnglesInfo["Beta1"] = {}
\&        RuleAnglesInfo["Beta2"] = {}
\&        RuleAnglesInfo["Theta0"] = {}
\&        
\&        # For exact strain energy calculation...
\&        RuleAnglesInfo["HistogramEnergy"] = []
\&        RuleAnglesInfo["HistogramEnergyLowerBound"] = []
\&        RuleAnglesInfo["HistogramEnergyUpperBound"] = []
.Ve
.IP "\fBSetupTorsionRuleElementPatternMol\fR" 4
.IX Item "SetupTorsionRuleElementPatternMol"
.Vb 1
\&    SetupTorsionRuleElementPatternMol(TorsionLibraryInfo, ElementNode, TorsionRuleNodeID, TorsionSMARTSPattern)
.Ve
.Sp
Setup pattern molecule for \s-1SMARTS\s0 pattern in torsion rule element.
.Sp
\&\fIArguments:\fR
.Sp
.Vb 6
\&    TorsionLibraryInfo (dict): A dictionary containing information for
\&        matching rotatable bonds.
\&    ElementNode (object): A torsion rule element node being matched in
\&       torsion library XML tree.
\&    TorsionRuleNodeID (int): Torsion rule element node ID.
\&    TorsionSMARTSPattern (str): SMARTS pattern for torsion rule element node.
.Ve
.Sp
\&\fIReturns:\fR
.Sp
.Vb 2
\&    object: RDKit molecule object corresponding to SMARTS pattern for
\&        torsion rule element node.
.Ve
.IP "\fBTrackHierarchyClassElementNode\fR" 4
.IX Item "TrackHierarchyClassElementNode"
.Vb 1
\&    TrackHierarchyClassElementNode(TorsionLibraryInfo, ElementNode)
.Ve
.Sp
Track hierarchy class element node using a stack.
.Sp
\&\fIArguments:\fR
.Sp
.Vb 4
\&    TorsionLibraryInfo (dict): A dictionary containing information for
\&        matching rotatable bonds.
\&    ElementNode (object): Hierarchy class element node in torsion library
\&        XML tree.
.Ve
.Sp
\&\fIReturns:\fR
.Sp
.Vb 1
\&    Nothing. The torsion library info is updated.
.Ve
.IP "\fBTrackHierarchySubClassElementNode\fR" 4
.IX Item "TrackHierarchySubClassElementNode"
.Vb 1
\&    TrackHierarchySubClassElementNode(TorsionLibraryInfo, ElementNode)
.Ve
.Sp
Track hierarchy sub class element node using a stack.
.Sp
\&\fIArguments:\fR
.Sp
.Vb 4
\&    TorsionLibraryInfo (dict): A dictionary containing information for
\&        matching rotatable bonds.
\&    ElementNode (object): Hierarchy sub class element node in torsion
\&        library XML tree.
.Ve
.Sp
\&\fIReturns:\fR
.Sp
.Vb 1
\&    Nothing. The torsion library info is updated.
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Manish Sud <msud@san.rr.com>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2022 Manish Sud. All rights reserved.
.PP
This file is part of MayaChemTools.
.PP
MayaChemTools is free software; you can redistribute it and/or modify it under
the terms of the \s-1GNU\s0 Lesser General Public License as published by the Free
Software Foundation; either version 3 of the License, or (at your option) any
later version.
