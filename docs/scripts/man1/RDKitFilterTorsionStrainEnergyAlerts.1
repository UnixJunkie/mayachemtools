.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "RDKitFilterTorsionStrainEnergyAlerts 1"
.TH RDKitFilterTorsionStrainEnergyAlerts 1 "2022-09-25" "perl v5.22.4" "MayaChemTools"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
RDKitFilterTorsionStrainEnergyAlerts.py \- Filter torsion strain energy library alerts
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
RDKitFilterTorsionStrainEnergyAlerts.py [\fB\-\-alertsMode\fR <TotalEnergy, MaxSingleEnergy, or TotalOrMaxSingleEnergy>]
[\fB\-\-alertsMaxSingleEnergyCutoff\fR <Number>] [\fB\-\-alertsTotalEnergyCutoff\fR <Number>]
[\fB\-\-filterTorsionsNotObserved\fR <yes or no>] [\fB\-\-infileParams\fR <Name,Value,...>] [\fB\-\-mode\fR <filter or count>]
[\fB\-\-mp\fR <yes or no>] [\fB\-\-mpParams\fR <Name,Value,...>] [\fB\-\-outfileAlerts\fR <yes or no>]
[\fB\-\-outfileAlertsMode\fR <All or AlertsOnly>] [\fB\-\-outfileFiltered\fR <yes or no>]
[\fB\-\-outfilesFilteredByRules\fR <yes or no>] [\fB\-\-outfilesFilteredByRulesMaxCount\fR <All or number>]
[\fB\-\-outfileSummary\fR <yes or no>] [\fB\-\-outfileSDFieldLabels\fR <Type,Label,...>] [\fB\-\-outfileParams\fR <Name,Value,...>]
[\fB\-\-overwrite\fR] [\fB\-\-precision\fR <number>] [ \fB\-\-rotBondsSMARTSMode\fR <NonStrict, SemiStrict,...>]
[\fB\-\-rotBondsSMARTSPattern\fR <\s-1SMARTS\s0>] [\fB\-\-torsionEnergyLibraryFile\fR <FileName or auto>]
[\fB\-w\fR <dir>] \fB\-i\fR <infile> \fB\-o\fR <outfile>
.PP
RDKitFilterTorsionStrainEnergyAlerts.py [\fB\-\-torsionEnergyLibraryFile\fR <FileName or auto>] \fB\-l\fR | \fB\-\-list\fR
.PP
RDKitFilterTorsionStrainEnergyAlerts.py \fB\-h\fR | \fB\-\-help\fR | \fB\-e\fR | \fB\-\-examples\fR
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Filter strained molecules from an input file for torsion strain energy library
[ Ref 153 ] alerts by matching rotatable bonds against \s-1SMARTS\s0 patterns specified
for torsion rules in a torsion energy library file and write out appropriate
molecules to output files. The molecules must have 3D coordinates in input file.
The default torsion strain energy library file, TorsionStrainEnergyLibrary.xml,
is available under MAYACHEMTOOLS/lib/data directory.
.PP
The data in torsion strain energy library file is organized in a hierarchical
manner. It consists of one generic class and six specific classes at the highest
level. Each class contains multiple subclasses corresponding to named functional
groups or substructure patterns. The subclasses consist of torsion rules sorted
from specific to generic torsion patterns. The torsion rule, in turn, contains a
list of peak values for torsion angles and two tolerance values. A pair of tolerance
values define torsion bins around a torsion peak value.
.PP
A strain energy calculation method, 'exact' or 'approximate' [ Ref 153 ], is 
associated with each torsion rule for calculating torsion strain energy. The 'exact'
stain energy calculation relies on the energy bins available under the energy histogram
consisting of 36 bins covering angles from \-180 to 180. The width of each bin is 10
degree. The energy bins are are defined at the right end points. The first and the
last energy bins correspond to \-170 and 180 respectively. The torsion angle is mapped
to a energy bin. An angle offset is calculated for the torsion angle from the the right
end point angle of the bin. The strain energy is estimated for the angle offset based
on the energy difference between the current and previous bins. The torsion strain
energy, in terms of torsion energy units (TEUs), corresponds to the sum of bin strain
energy and the angle offset strain energy.
.PP
.Vb 1
\&    Energy = BinEnergyDiff/10.0 * BinAngleOffset + BinEnergy[BinNum]
\&    
\&    Where:
\&    
\&    BinEnergyDiff = BinEnergy[BinNum] \- BinEnergy[PreviousBinNum]
\&    BinAngleOffset = TorsionAngle \- BinAngleRightSide
.Ve
.PP
The 'approximate' strain energy calculation relies on the angle difference between a
torsion angle and the torsion peaks observed for the torsion rules in the torsion
energy library. The torsion angle is matched to a torsion peak based on the value of
torsion angle difference. It must be less than or equal to the value for the second
tolerance 'tolerance2'. Otherwise, the torsion angle is not observed in the torsion
energy library and a value of '\s-1NA\s0' is assigned for torsion energy along with the lower
and upper bounds on energy at 95% confidence interval. The 'approximate' torsion
energy (TEUs) for observed torsion angle is calculated using the following formula:
.PP
.Vb 1
\&    Energy = beta_1 * (AngleDiff ** 2) + beta_2 * (AngleDiff ** 4)
.Ve
.PP
The coefficients 'beta_1' and 'beta_2' are available for the observed angles in 
the torsion strain energy library. The 'AngleDiff' is the difference between the
torsion angle and the matched torsion peak.
.PP
For example:
.PP
.Vb 10
\&    <library>
\&        <hierarchyClass id1="G" id2="G" name="GG">
\&        ...
\&        </hierarchyClass>
\&        <hierarchyClass id1="C" id2="O" name="CO">
\&            <hierarchySubClass name="Ester bond I" smarts="O=[C:2][O:3]">
\&                <torsionRule method="exact" smarts=
\&                    "[O:1]=[C:2]!@[O:3]~[CH0:4]">
\&                    <angleList>
\&                        <angle score="56.52" tolerance1="20.00"
\&                        tolerance2="25.00" value="0.0"/>
\&                    </angleList>
\&                    <histogram>
\&                        <bin count="1"/>
\&                        ...
\&                    </histogram>
\&                    <histogram_shifted>
\&                        <bin count="0"/>
\&                        ...
\&                    </histogram_shifted>
\&                    <histogram_converted>
\&                        <bin energy="4.67... lower="2.14..." upper="Inf"/>
\&                        ...
\&                        <bin energy="1.86..." lower="1.58..." upper="2.40..."/>
\&                        ...
\&                       </histogram_converted>
\&                </torsionRule>
\&                <torsionRule method="approximate" smarts=
\&                    "[cH0:1][c:2]([cH0])!@[O:3][p:4]">
\&                    <angleList>
\&                    <angle beta_1="0.002..." beta_2="\-7.843...e\-07"
\&                        score="27.14" theta_0="\-90.0" tolerance1="30.00"
\&                        tolerance2="45.00" value="\-90.0"/>
\&                    ...
\&                    </angleList>
\&                    <histogram>
\&                        <bin count="0"/>
\&                         ...
\&                    </histogram>
\&                    <histogram_shifted>
\&                        <bin count="0"/>
\&                        ...
\&                    </histogram_shifted>
\&                </torsionRule>
\&            ...
\&         ...
\&        </hierarchyClass>
\&         <hierarchyClass id1="N" id2="C" name="NC">
\&         ...
\&        </hierarchyClass>
\&        <hierarchyClass id1="S" id2="N" name="SN">
\&        ...
\&        </hierarchyClass>
\&        <hierarchyClass id1="C" id2="S" name="CS">
\&        ...
\&        </hierarchyClass>
\&        <hierarchyClass id1="C" id2="C" name="CC">
\&        ...
\&        </hierarchyClass>
\&        <hierarchyClass id1="S" id2="S" name="SS">
\&         ...
\&        </hierarchyClass>
\&    </library>
.Ve
.PP
The rotatable bonds in a 3D molecule are identified using a default \s-1SMARTS\s0 pattern.
A custom \s-1SMARTS\s0 pattern may be optionally specified to detect rotatable bonds.
Each rotatable bond is matched to a torsion rule in the torsion strain energy library.
The strain energy is calculated for each rotatable bond using the calculation
method, 'exact' or 'approximate', associated with the matched torsion rule.
.PP
The total strain energy (TEUs) of a molecule corresponds to the sum of  'exact' and
\&'approximate' strain energies calculated for all matched rotatable bonds in the
molecule. The total strain energy is set to '\s-1NA\s0' for molecules containing a 'approximate'
energy estimate for a torsion angle not observed in the torsion energy library. In
addition, the lower and upper bounds on energy at 95% confidence interval are
set to '\s-1NA\s0'.
.PP
The following output files are generated after the filtering:
.PP
.Vb 4
\&    <OutfileRoot>.sdf
\&    <OutfileRoot>_Filtered.sdf
\&    <OutfileRoot>_AlertsSummary.csv
\&    <OutfileRoot>_Filtered_TopRule*.sdf
.Ve
.PP
The last two set of outfile files, <OutfileRoot>_AlertsSummary.csv and
<OutfileRoot>_<OutfileRoot>_AlertsSummary.csv, are only generated during filtering
by 'MaxSingleEnergy'.
.PP
The supported input file formats are: Mol (.mol), \s-1SD \s0(.sdf, .sd)
.PP
The supported output file formats are: \s-1SD \s0(.sdf, .sd)
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\fB\-a, \-\-alertsMode\fR <TotalEnergy,...>  [default: TotalEnergy]" 4
.IX Item "-a, --alertsMode <TotalEnergy,...> [default: TotalEnergy]"
Torsion strain energy library alert types to use for filtering molecules
containing rotatable bonds based on the calculated values for the total
torsion strain energy of a molecule and  the maximum single strain
energy of a rotatable bond in a molecule.
.Sp
Possible values: TotalEnergy, MaxSingleEnergy, or TotalOrMaxSingleEnergy
.Sp
The strain energy cutoff values in terms of torsion energy units (TEUs) are
used to filter molecules as shown below:
.Sp
.Vb 1
\&    AlertsMode                AlertsEnergyCutoffs (TEUs)
\&    
\&    TotalEnergy               >= TotalEnergyCutoff
\&    
\&    MaxSingleEnergy           >= MaxSingleEnergyCutoff
\&    
\&    TotalOrMaxSingleEnergy    >= TotalEnergyCutoff
\&                              or >= MaxSingleEnergyCutoff
.Ve
.IP "\fB\-\-alertsMaxSingleEnergyCutoff\fR <Number>  [default: 1.8]" 4
.IX Item "--alertsMaxSingleEnergyCutoff <Number> [default: 1.8]"
Maximum single strain energy (TEUs) cutoff [ Ref 153 ] for filtering molecules
based on the maximum value of a single strain energy of a rotatable bond
in  a molecule. This option is used during 'MaxSingleEnergy' or
\&'TotalOrMaxSingleEnergy' values of '\-a, \-\-alertsMode' option.
.Sp
The maximum single strain energy must be greater than or equal to the
specified cutoff value for filtering molecules.
.IP "\fB\-\-alertsTotalEnergyCutoff\fR <Number>  [default: 6.0]" 4
.IX Item "--alertsTotalEnergyCutoff <Number> [default: 6.0]"
Total strain strain energy (TEUs) cutoff [ Ref 153 ] for filtering molecules
based on total strain energy for all rotatable bonds in a molecule. This
option is used during 'TotalEnergy' or 'TotalOrMaxSingleEnergy'
values of '\-a, \-\-alertsMode' option.
.Sp
The total strain energy must be greater than or equal to the specified
cutoff value for filtering molecules.
.IP "\fB\-\-filterTorsionsNotObserved\fR <yes or no>  [default: no]" 4
.IX Item "--filterTorsionsNotObserved <yes or no> [default: no]"
Filter molecules containing torsion angles not observed in torsion strain
energy library. It's not possible to calculate torsion strain energies for
these torsions during 'approximate' match to a specified torsion in the
library.
.Sp
The 'approximate' strain energy calculation relies on the angle difference
between a torsion angle and the torsion peaks observed for the torsion
rules in the torsion energy library. The torsion angle is matched to a
torsion peak based on the value of torsion angle difference. It must be
less than or equal to the value for the second tolerance 'tolerance2'.
Otherwise, the torsion angle is not observed in the torsion energy library
and a value of '\s-1NA\s0' is assigned for torsion energy along with the lower and
upper bounds on energy at 95% confidence interval.
.IP "\fB\-e, \-\-examples\fR" 4
.IX Item "-e, --examples"
Print examples.
.IP "\fB\-h, \-\-help\fR" 4
.IX Item "-h, --help"
Print this help message.
.IP "\fB\-i, \-\-infile\fR <infile>" 4
.IX Item "-i, --infile <infile>"
Input file name.
.IP "\fB\-\-infileParams\fR <Name,Value,...>  [default: auto]" 4
.IX Item "--infileParams <Name,Value,...> [default: auto]"
A comma delimited list of parameter name and value pairs for reading
molecules from files. The supported parameter names for different file
formats, along with their default values, are shown below:
.Sp
.Vb 1
\&    SD, MOL: removeHydrogens,no,sanitize,yes,strictParsing,yes
.Ve
.IP "\fB\-l, \-\-list\fR" 4
.IX Item "-l, --list"
List torsion library information without performing any filtering.
.IP "\fB\-m, \-\-mode\fR <filter or count>  [default: filter]" 4
.IX Item "-m, --mode <filter or count> [default: filter]"
Specify whether to filter molecules for torsion strain energy library [ Ref 153 ]
alerts by matching rotatable bonds against \s-1SMARTS\s0 patterns specified for
torsion rules to calculate torsion strain energies and write out the rest
of the molecules to an outfile or simply count the number of matched
molecules marked for filtering.
.IP "\fB\-\-mp\fR <yes or no>  [default: no]" 4
.IX Item "--mp <yes or no> [default: no]"
Use multiprocessing.
.Sp
By default, input data is retrieved in a lazy manner via mp.Pool.\fIimap()\fR
function employing lazy RDKit data iterable. This allows processing of
arbitrary large data sets without any additional requirements memory.
.Sp
All input data may be optionally loaded into memory by mp.Pool.\fImap()\fR
before starting worker processes in a process pool by setting the value
of 'inputDataMode' to 'InMemory' in '\-\-mpParams' option.
.Sp
A word to the wise: The default 'chunkSize' value of 1 during 'Lazy' input
data mode may adversely impact the performance. The '\-\-mpParams' section
provides additional information to tune the value of 'chunkSize'.
.IP "\fB\-\-mpParams\fR <Name,Value,...>  [default: auto]" 4
.IX Item "--mpParams <Name,Value,...> [default: auto]"
A comma delimited list of parameter name and value pairs to configure
multiprocessing.
.Sp
The supported parameter names along with their default and possible
values are shown below:
.Sp
.Vb 3
\&    chunkSize, auto
\&    inputDataMode, Lazy   [ Possible values: InMemory or Lazy ]
\&    numProcesses, auto   [ Default: mp.cpu_count() ]
.Ve
.Sp
These parameters are used by the following functions to configure and
control the behavior of multiprocessing: mp.\fIPool()\fR, mp.Pool.\fImap()\fR, and
mp.Pool.\fIimap()\fR.
.Sp
The chunkSize determines chunks of input data passed to each worker
process in a process pool by mp.Pool.\fImap()\fR and mp.Pool.\fIimap()\fR functions.
The default value of chunkSize is dependent on the value of 'inputDataMode'.
.Sp
The mp.Pool.\fImap()\fR function, invoked during 'InMemory' input data mode,
automatically converts RDKit data iterable into a list, loads all data into
memory, and calculates the default chunkSize using the following method
as shown in its code:
.Sp
.Vb 2
\&    chunkSize, extra = divmod(len(dataIterable), len(numProcesses) * 4)
\&    if extra: chunkSize += 1
.Ve
.Sp
For example, the default chunkSize will be 7 for a pool of 4 worker processes
and 100 data items.
.Sp
The mp.Pool.\fIimap()\fR function, invoked during 'Lazy' input data mode, employs
\&'lazy' RDKit data iterable to retrieve data as needed, without loading all the
data into memory. Consequently, the size of input data is not known a priori.
It's not possible to estimate an optimal value for the chunkSize. The default 
chunkSize is set to 1.
.Sp
The default value for the chunkSize during 'Lazy' data mode may adversely
impact the performance due to the overhead associated with exchanging
small chunks of data. It is generally a good idea to explicitly set chunkSize to
a larger value during 'Lazy' input data mode, based on the size of your input
data and number of processes in the process pool.
.Sp
The mp.Pool.\fImap()\fR function waits for all worker processes to process all
the data and return the results. The mp.Pool.\fIimap()\fR function, however,
returns the the results obtained from worker processes as soon as the
results become available for specified chunks of data.
.Sp
The order of data in the results returned by both mp.Pool.\fImap()\fR and 
mp.Pool.\fIimap()\fR functions always corresponds to the input data.
.IP "\fB\-o, \-\-outfile\fR <outfile>" 4
.IX Item "-o, --outfile <outfile>"
Output file name.
.IP "\fB\-\-outfileAlerts\fR <yes or no>  [default: yes]" 4
.IX Item "--outfileAlerts <yes or no> [default: yes]"
Write out alerts information to \s-1SD\s0 output files.
.IP "\fB\-\-outfileAlertsMode\fR <All or AlertsOnly>  [default: AlertsOnly]" 4
.IX Item "--outfileAlertsMode <All or AlertsOnly> [default: AlertsOnly]"
Write alerts information to \s-1SD\s0 output files for all alerts or only for alerts
specified by '\-\-AlertsMode' option. Possible values: All or AlertsOnly
This option is only valid for 'Yes' value of '\-\-outfileAlerts' option.
.Sp
The following alerts information is added to \s-1SD\s0 output files using
\&'TorsionAlerts' data field:
.Sp
.Vb 4
\&    RotBondIndices TorsionIndices TorsionAngle
\&    Energy EnergyLowerBoundCI EnergyUpperBoundCI
\&    HierarchyClass HierarchySubClass TorsionRule
\&    EnergyMethod AngleNotObserved MaxSingleEnergyAlert
.Ve
.Sp
The following data filelds are added to \s-1SD\s0 output files based on the value of
\&'\-\-AlertsMode' option:
.Sp
.Vb 3
\&    TotalEnergy
\&    TotalEnergyLowerBoundCI
\&    TotalEnergyUpperBoundCI
\&    
\&    MaxSingleEnergy
\&    MaxSingleEnergyAlertsCount
\&    
\&    AnglesNotObservedCount
.Ve
.Sp
The 'RotBondsCount' is always added to \s-1SD\s0 output files containing both
remaining and filtered molecules.
.Sp
Format:
.Sp
.Vb 2
\&    > <RotBondsCount>
\&    Number
\&    
\&    > <TotalEnergy>
\&    Number
\&    
\&    > <TotalEnergyLowerBoundCI>
\&    Number
\&    
\&    > <TotalEnergyUpperBoundCI>
\&    Number
\&    
\&    > <MaxSingleEnergy>
\&    Number
\&    
\&    > <MaxSingleEnergyAlertsCount>
\&    Number
\&    
\&    > <AnglesNotObservedCount>
\&    Number
\&    
\&    > <TorsionAlerts (RotBondIndices TorsionIndices TorsionAngle
\&        Energy EnergyLowerBoundCI EnergyUpperBoundCI
\&        HierarchyClass HierarchySubClass TorsionRule
\&        EnergyMethod AngleNotObserved MaxSingleEnergyAlert)>
\&    AtomIndex2,AtomIndex3  AtomIndex1,AtomIndex2,AtomIndex3,AtomIndex4
\&    Angle  Energy EnergyLowerBoundCI EnergyUpperBoundCI
\&    ClassName SubClassName SMARTS EnergyMethod Yes|No|NA Yes|No|NA
\&    ... ... ...
\&    ... ... ...
.Ve
.Sp
A set of 12 values is written out as value of 'TorsionAlerts' data field for
each torsion in a molecule. The space character is used as a delimiter
to separate values with in a set and across set. The comma character
is used to delimit multiple values for each value in a set.
.Sp
The 'RotBondIndices' and 'TorsionIndices' contain 2 and 4 comma delimited
values representing atom indices for a rotatable bond and the matched
torsion.
.Sp
The 'Energy' value is the estimated strain energy for the matched torsion.
The 'EnergyLowerBoundCI' and 'EnergyUpperBoundCI' represent lower and
bound energy estimates at 95% confidence interval. The 'EnergyMethod',
exact or approximate, corresponds to the method employed to estimate
torsion strain energy.
.Sp
The 'AngleNotObserved' is only valid for 'approximate' value of 'EnergyMethod'.
It has three possible values: Yes, No, or \s-1NA.\s0 The 'Yes' value indicates that
the 'TorsionAngle' is outside the 'tolerance2' of all peaks for the matched
torsion rule in the torsion library.
.Sp
The 'MaxSingleEnergyAlert' is valid for the following values of '\-a, \-\-alertsMode'
option: 'MaxSingleEnergy' or 'TotalOrMaxSingleEnergy'. It has three possible
values: Yes, No, or \s-1NA.\s0 It's set to '\s-1NA\s0' for 'Yes' or '\s-1NA\s0' values of
\&'AngleNotObserved'. The 'Yes' value indicates that the estimated torsion
energy is greater than the specified value for '\-\-alertsMaxSingleEnergyCutoff'
option.
.Sp
For example:
.Sp
.Vb 2
\&    >  <RotBondsCount>  (1) 
\&    14
\&    
\&    >  <TotalEnergy>  (1) 
\&    6.8065
\&    
\&    >  <TotalEnergyLowerBoundCI>  (1) 
\&    5.9340
\&    
\&    >  <TotalEnergyUpperBoundCI>  (1) 
\&    NA
\&    
\&    >  <MaxSingleEnergy>  (1) 
\&    1.7108
\&    
\&    >  <MaxSingleEnergyAlertsCount>  (1) 
\&    0
\&    
\&    >  <AnglesNotObservedCount>  (1) 
\&    0
\&     
\&    >  <TorsionAlerts(RotBondIndices TorsionIndices TorsionAngle Energy
\&        EnergyLowerBoundCI EnergyUpperBoundCI HierarchyClass
\&        HierarchySubClass TorsionRule EnergyMethod AngleNotObserved
\&        MaxSingleEnergyAlert)>  (1) 
\&    2,1 48,2,1,0 61.90 0.0159 \-0.0320 0.0674 CO Ether [O:1][CX4:2]!
\&    @[O:3][CX4:4] Exact NA No 2,3 1,2,3,4 109.12 1.5640 1.1175 NA CC
\&    None/[CX4][CX3] [O:1][CX4:2]!@[CX3:3]=[O:4] Exact NA No
\&    ... ... ...
.Ve
.IP "\fB\-\-outfileFiltered\fR <yes or no>  [default: yes]" 4
.IX Item "--outfileFiltered <yes or no> [default: yes]"
Write out a file containing filtered molecules. Its name is automatically
generated from the specified output file. Default: <OutfileRoot>_
Filtered.<OutfileExt>.
.IP "\fB\-\-outfilesFilteredByRules\fR <yes or no>  [default: auto]" 4
.IX Item "--outfilesFilteredByRules <yes or no> [default: auto]"
Write out \s-1SD\s0 files containing filtered molecules for individual torsion
rules triggering alerts in molecules. The name of \s-1SD\s0 files are automatically
generated from the specified output file. Default file names: <OutfileRoot>_
Filtered_TopRule*.sdf.
.Sp
Default value: 'yes' for 'MaxSingleEnergy' of '\-a, \-\-alertsMode' option';
otherwise, 'no'.
.Sp
The output files are only generated for 'MaxSingleEnergy' of
\&'\-a, \-\-alertsMode' option.
.Sp
The following alerts information is added to \s-1SD\s0 output files:
.Sp
.Vb 2
\&    > <RotBondsCount>
\&    Number
\&    
\&    > <TotalEnergy>
\&    Number
\&    
\&    > <TotalEnergyLowerBoundCI>
\&    Number
\&    
\&    > <TotalEnergyUpperBoundCI>
\&    Number
\&    
\&    > <MaxSingleEnergy>
\&    Number
\&    
\&    > <MaxSingleEnergyAlertsCount>
\&    Number
\&    
\&    > <AnglesNotObservedCount>
\&    Number
\&    
\&    >  <TorsionRule (HierarchyClass HierarchySubClass TorsionRule
\&        EnergyMethod)> 
\&    ClassName SubClassName EnergyMethod SMARTS
\&     ... ... ...
\&    
\&    > <TorsionRuleMaxSingleEnergyAlertsCount>
\&    Number
\&    
\&    > <TorsionRuleAnglesNotObservedCount>
\&    Number
\&    
\&    >  <TorsionRuleAlerts (RotBondIndices TorsionIndices TorsionAngle
\&        Energy EnergyLowerBoundCI EnergyUpperBoundCI
\&        AngleNotObserved MaxSingleEnergyAlert)>
\&    AtomIndex2,AtomIndex3  AtomIndex1,AtomIndex2,AtomIndex3,AtomIndex4
\&    Angle Energy EnergyLowerBoundCI EnergyUpperBoundCI EnergyMethod
\&    Yes|No|NA Yes|No|NA
\&     ... ... ...
.Ve
.Sp
For example:
.Sp
.Vb 2
\&    >  <RotBondsCount>  (1) 
\&    8
\&    
\&    >  <TotalEnergy>  (1) 
\&    6.1889
\&    
\&    >  <TotalEnergyLowerBoundCI>  (1) 
\&    5.1940
\&    
\&    >  <TotalEnergyUpperBoundCI>  (1) 
\&    NA
\&    
\&    >  <MaxSingleEnergy>  (1) 
\&    1.9576
\&    
\&    >  <MaxSingleEnergyAlertsCount>  (1) 
\&    1
\&    
\&    >  <AnglesNotObservedCount>  (1) 
\&    0
\&    
\&    >  <TorsionRule (HierarchyClass HierarchySubClass TorsionRule
\&        EnergyMethod)>  (1) 
\&    CC None/[CX4:2][CX4:3] [!#1:1][CX4:2]!@[CX4:3][!#1:4] Exact
\&    
\&    >  <TorsionRuleMaxSingleEnergyAlertsCount>  (1) 
\&    0
\&    
\&    >  <TorsionRuleAnglesNotObservedCount>  (1) 
\&    0
\&    
\&    >  <TorsionRuleAlerts (RotBondIndices TorsionIndices TorsionAngle
\&        Energy EnergyLowerBoundCI EnergyUpperBoundCI AngleNotObserved
\&       MaxSingleEnergyAlert)>  (1) 
\&    1,3 0,1,3,4 72.63 0.8946 0.8756 0.9145 NA No
.Ve
.IP "\fB\-\-outfilesFilteredByRulesMaxCount\fR <All or number>  [default: 10]" 4
.IX Item "--outfilesFilteredByRulesMaxCount <All or number> [default: 10]"
Write out \s-1SD\s0 files containing filtered molecules for specified number of
top N torsion rules triggering alerts for the largest number of molecules
or for all torsion rules triggering alerts across all molecules.
.Sp
These output files are only generated for 'MaxSingleEnergy' value of
\&'\-a, \-\-alertsMode' option.
.IP "\fB\-\-outfileSummary\fR <yes or no>  [default: auto]" 4
.IX Item "--outfileSummary <yes or no> [default: auto]"
Write out a \s-1CVS\s0 text file containing summary of torsions rules responsible
for triggering torsion alerts. Its name is automatically generated from the
specified output file. Default: <OutfileRoot>_AlertsSummary.csv.
.Sp
Default value: 'yes' for 'MaxSingleEnergy' of '\-a, \-\-alertsMode' option';
otherwise, 'no'.
.Sp
The summary output file is only generated for 'MaxSingleEnergy' of
\&'\-a, \-\-alertsMode' option.
.Sp
The following alerts information is written to summary text file:
.Sp
.Vb 3
\&    TorsionRule, HierarchyClass, HierarchySubClass, EnergyMethod,
\&    MaxSingleEnergyTorsionAlertTypes, MaxSingleEnergyTorsionAlertCount,
\&    MaxSingleEnergyTorsionAlertMolCount
.Ve
.Sp
The double quotes characters are removed from \s-1SMART\s0 patterns before
before writing them to a \s-1CSV\s0 file. In addition, the torsion rules are sorted by
TorsionAlertMolCount.
.IP "\fB\-\-outfileSDFieldLabels\fR <Type,Label,...>  [default: auto]" 4
.IX Item "--outfileSDFieldLabels <Type,Label,...> [default: auto]"
A comma delimited list of \s-1SD\s0 data field type and label value pairs for writing
torsion alerts information along with molecules to \s-1SD\s0 files.
.Sp
The supported \s-1SD\s0 data field label type along with their default values are
shown below:
.Sp
.Vb 1
\&    For all SD files:
\&    
\&    RotBondsCountLabel, RotBondsCount,
\&    
\&    TotalEnergyLabel, TotalEnergy,
\&    TotalEnergyLowerBoundCILabel, TotalEnergyLowerBoundCI,
\&    TotalEnergyUpperBoundCILabel, TotalEnergyUpperBoundCI,
\&    
\&    MaxSingleEnergyLabel, MaxSingleEnergy,
\&    MaxSingleEnergyAlertsCountLabel,
\&        MaxSingleEnergyAlertsCount
\&    
\&    AnglesNotObservedCountLabel,
\&        AnglesNotObservedCount
\&    
\&    TorsionAlertsLabel, TorsionAlerts(RotBondIndices TorsionIndices
\&        TorsionAngle Energy EnergyLowerBoundCI EnergyUpperBoundCI
\&        HierarchyClass HierarchySubClass TorsionRule
\&        EnergyMethod AngleNotObserved)
\&    
\&    For individual SD files filtered by torsion rules:
\&    
\&    TorsionRuleLabel, TorsionRule (HierarchyClass HierarchySubClass
\&        EnergyMethod TorsionRule)
\&    TorsionRuleMaxSingleEnergyAlertsCountLabel,
\&        TorsionRuleMaxSingleEnergyAlertsCount,
\&    TorsionRuleAnglesNotObservedCountLabel,
\&        TorsionRuleAnglesNotObservedCount,
\&    TorsionRuleAlertsLabel, TorsionRuleAlerts (RotBondIndices
\&        TorsionIndices TorsionAngle Energy EnergyLowerBoundCI
\&        EnergyUpperBoundCI EnergyMethod AngleObserved)
.Ve
.IP "\fB\-\-outfileParams\fR <Name,Value,...>  [default: auto]" 4
.IX Item "--outfileParams <Name,Value,...> [default: auto]"
A comma delimited list of parameter name and value pairs for writing
molecules to files. The supported parameter names for different file
formats, along with their default values, are shown below:
.Sp
.Vb 1
\&    SD: kekulize,yes
.Ve
.IP "\fB\-\-overwrite\fR" 4
.IX Item "--overwrite"
Overwrite existing files.
.IP "\fB\-\-precision\fR <number>  [default: 4]" 4
.IX Item "--precision <number> [default: 4]"
Floating point precision for writing torsion strain energy values.
.IP "\fB\-r, \-\-rotBondsSMARTSMode\fR <NonStrict, SemiStrict,...>  [default: SemiStrict]" 4
.IX Item "-r, --rotBondsSMARTSMode <NonStrict, SemiStrict,...> [default: SemiStrict]"
\&\s-1SMARTS\s0 pattern to use for identifying rotatable bonds in a molecule
for matching against torsion rules in the torsion library. Possible values:
NonStrict, SemiStrict, Strict or Specify. The rotatable bond \s-1SMARTS\s0 matches
are filtered to ensure that each atom in the rotatable bond is attached to
at least two heavy atoms.
.Sp
The following \s-1SMARTS\s0 patterns are used to identify rotatable bonds for
different modes:
.Sp
.Vb 1
\&    NonStrict: [!$(*#*)&!D1]\-&!@[!$(*#*)&!D1]
\&    
\&    SemiStrict:
\&    [!$(*#*)&!D1&!$(C(F)(F)F)&!$(C(Cl)(Cl)Cl)&!$(C(Br)(Br)Br)
\&    &!$(C([CH3])([CH3])[CH3])]\-!@[!$(*#*)&!D1&!$(C(F)(F)F)
\&    &!$(C(Cl)(Cl)Cl)&!$(C(Br)(Br)Br)&!$(C([CH3])([CH3])[CH3])]
\&    
\&    Strict:
\&    [!$(*#*)&!D1&!$(C(F)(F)F)&!$(C(Cl)(Cl)Cl)&!$(C(Br)(Br)Br)
\&    &!$(C([CH3])([CH3])[CH3])&!$([CD3](=[N,O,S])\-!@[#7,O,S!D1])
\&    &!$([#7,O,S!D1]\-!@[CD3]=[N,O,S])&!$([CD3](=[N+])\-!@[#7!D1])
\&    &!$([#7!D1]\-!@[CD3]=[N+])]\-!@[!$(*#*)&!D1&!$(C(F)(F)F)
\&    &!$(C(Cl)(Cl)Cl)&!$(C(Br)(Br)Br)&!$(C([CH3])([CH3])[CH3])]
.Ve
.Sp
The 'NonStrict' and 'Strict' \s-1SMARTS\s0 patterns are available in RDKit. The 
\&'NonStrict' \s-1SMARTS\s0 pattern corresponds to original Daylight \s-1SMARTS\s0
specification for rotatable bonds. The 'SemiStrict' \s-1SMARTS\s0 pattern is 
derived from 'Strict' \s-1SMARTS\s0 patterns for its usage in this script.
.Sp
You may use any arbitrary \s-1SMARTS\s0 pattern to identify rotatable bonds by
choosing 'Specify' value for '\-r, \-\-rotBondsSMARTSMode' option and providing its
value via '\-\-rotBondsSMARTSPattern' option.
.IP "\fB\-\-rotBondsSMARTSPattern\fR <\s-1SMARTS\s0>" 4
.IX Item "--rotBondsSMARTSPattern <SMARTS>"
\&\s-1SMARTS\s0 pattern for identifying rotatable bonds. This option is only valid
for 'Specify' value of '\-r, \-\-rotBondsSMARTSMode' option.
.IP "\fB\-t, \-\-torsionEnergyLibraryFile\fR <FileName or auto>  [default: auto]" 4
.IX Item "-t, --torsionEnergyLibraryFile <FileName or auto> [default: auto]"
Specify a \s-1XML\s0 file name containing data for torsion starin energy library
hierarchy or use default file, TorsionEnergyLibrary.xml, available in
MAYACHEMTOOLS/lib/data directory.
.Sp
The format of data in local \s-1XML\s0 file must match format of the data in Torsion
Library [ Ref 153 ] file available in \s-1MAYACHEMTOOLS\s0 data directory.
.IP "\fB\-w, \-\-workingdir\fR <dir>" 4
.IX Item "-w, --workingdir <dir>"
Location of working directory which defaults to the current directory.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
To filter molecules containing rotatable bonds with total strain energy value
of >= 6.0 (TEUs) based on torsion rules in the torsion energy library and write
write out \s-1SD\s0 files containing remaining and filtered molecules, type:
.PP
.Vb 2
\&    % RDKitFilterTorsionStrainEnergyAlerts.py \-i Sample3D.sdf
\&      \-o Sample3DOut.sdf
.Ve
.PP
To filter molecules containing any rotatable bonds with strain energy value of
>= 1.8 (TEUs) based on torsion rules in the torsion energy library and write out
\&\s-1SD\s0 files containing remaining and filtered molecules, and individual \s-1SD\s0 files for
torsion rules triggering alerts along with appropriate torsion information for
red alerts, type:
.PP
.Vb 2
\&    % RDKitFilterTorsionStrainEnergyAlerts.py \-a MaxSingleEnergy
\&      \-i Sample3D.sdf \-o Sample3DOut.sdf
.Ve
.PP
To filter molecules containing rotatable bonds with total strain energy value
of >= 6.0 (TEUs) or any single strain energy value of >= 1.8 (TEUs) and write out
\&\s-1SD\s0 files containing remaining and filtered molecules, type:
.PP
.Vb 2
\&    % RDKitFilterTorsionStrainEnergyAlerts.py \-a TotalOrMaxSingleEnergy
\&      \-i Sample3D.sdf \-o Sample3DOut.sdf
.Ve
.PP
To filter molecules containing rotatable bonds with specific cutoff values for
total or single torsion strain energy and write out \s-1SD\s0 files containing
remaining and filtered molecules, type:
.PP
.Vb 3
\&    % RDKitFilterTorsionStrainEnergyAlerts.py \-a TotalOrMaxSingleEnergy
\&      \-i Sample3D.sdf \-o Sample3DOut.sdf \-\-alertsTotalEnergyCutoff 6.0
\&      \-\-alertsMaxSingleEnergyCutoff 1.8
.Ve
.PP
To run the first example for filtering molecules and writing out torsion
information for all alert types to \s-1SD\s0 files, type:
.PP
.Vb 2
\&    % RDKitFilterTorsionStrainEnergyAlerts.py \-i Sample3D.sdf
\&      \-o Sample3DOut.sdf \-\-outfileAlertsMode All
.Ve
.PP
To run the first example for filtering molecules in multiprocessing mode on
all available CPUs without loading all data into memory and write out \s-1SD\s0 files,
type:
.PP
.Vb 2
\&    % RDKitFilterTorsionStrainEnergyAlerts.py \-\-mp yes \-i Sample3D.sdf
\&     \-o Sample3DOut.sdf
.Ve
.PP
To run the first example for filtering molecules in multiprocessing mode on
all available CPUs by loading all data into memory and write out a \s-1SD\s0 files,
type:
.PP
.Vb 2
\&    % RDKitFilterTorsionStrainEnergyAlerts.py  \-\-mp yes \-\-mpParams
\&      "inputDataMode, InMemory" \-i Sample3D.sdf  \-o Sample3DOut.sdf
.Ve
.PP
To run the first example for filtering molecules in multiprocessing mode on
specific number of CPUs and chunksize without loading all data into memory
and write out \s-1SD\s0 files, type:
.PP
.Vb 3
\&    % RDKitFilterTorsionStrainEnergyAlerts.py \-\-mp yes \-\-mpParams
\&      "inputDataMode,lazy,numProcesses,4,chunkSize,8"  \-i Sample3D.sdf
\&      \-o Sample3DOut.sdf
.Ve
.PP
To list information about default torsion library file without performing any
filtering, type:
.PP
.Vb 1
\&    % RDKitFilterTorsionStrainEnergyAlerts.py \-l
.Ve
.PP
To list information about a local torsion library \s-1XML\s0 file without performing
any, filtering, type:
.PP
.Vb 2
\&    % RDKitFilterTorsionStrainEnergyAlerts.py \-\-torsionEnergyLibraryFile
\&      TorsionStrainEnergyLibrary.xml \-l
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Manish Sud (msud@san.rr.com)
.SH "COLLABORATOR"
.IX Header "COLLABORATOR"
Pat Walters
.SH "SEE ALSO"
.IX Header "SEE ALSO"
RDKitFilterChEMBLAlerts.py, RDKitFilterPAINS.py, RDKitFilterTorsionLibraryAlerts.py,
RDKitConvertFileFormat.py, RDKitSearchSMARTS.py
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2022 Manish Sud. All rights reserved.
.PP
This script uses the torsion strain energy library developed by Gu, S.;
Smith, M. S.; Yang, Y.; Irwin, J. J.; Shoichet, B. K. [ Ref 153 ].
.PP
The torsion strain enegy library is based on the Torsion Library jointly
developed by the University of Hamburg, Center for Bioinformatics,
Hamburg, Germany and F. Hoffmann-La-Roche Ltd., Basel, Switzerland.
.PP
The functionality available in this script is implemented using RDKit, an
open source toolkit for cheminformatics developed by Greg Landrum.
.PP
This file is part of MayaChemTools.
.PP
MayaChemTools is free software; you can redistribute it and/or modify it under
the terms of the \s-1GNU\s0 Lesser General Public License as published by the Free
Software Foundation; either version 3 of the License, or (at your option) any
later version.
