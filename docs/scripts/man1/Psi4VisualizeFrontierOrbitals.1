.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Psi4VisualizeFrontierOrbitals 1"
.TH Psi4VisualizeFrontierOrbitals 1 "2022-09-25" "perl v5.22.4" "MayaChemTools"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Psi4VisualizeFrontierOrbitals.py \- Visualize frontier molecular orbitals
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Psi4VisualizeFrontierOrbitals.py [\fB\-\-basisSet\fR <text>] [\fB\-\-infileParams\fR <Name,Value,...>] [\fB\-\-methodName\fR <text>]
[\fB\-\-mode\fR <GenerateCubeFiles, VisualizeCubeFiles, Both>] [\fB\-\-mp\fR <yes or no>] [\fB\-\-mpParams\fR <Name, Value,...>]
[\fB\-\-outfilesDir\fR <text>] [\fB\-\-outfilesMolPrefix\fR <MolNum, MolName, Both> ] [\fB\-\-overwrite\fR]
[\fB\-\-psi4CubeFilesParams\fR <Name,Value,...>] [\fB\-\-psi4OptionsParams\fR <Name,Value,...>]
[\fB\-\-psi4RunParams\fR <Name,Value,...>] [\fB\-\-pymolViewParams\fR <Name,Value,...>] [\fB\-\-quiet\fR <yes or no>]
[\fB\-\-reference\fR <text>] [\fB\-w\fR <dir>] \fB\-i\fR <infile> \fB\-o\fR <outfile>
.PP
Psi4VisualizeFrontierOrbitals.py \fB\-h\fR | \fB\-\-help\fR | \fB\-e\fR | \fB\-\-examples\fR
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Generate and visualize frontier molecular orbitals for molecules in input
file. A set of cube files, corresponding to frontier orbitals, is generated for 
molecules. The cube files are used to create a PyMOL visualization file for
viewing volumes, meshes, and surfaces representing frontier molecular
orbitals. An option is available to skip the generation of new cube files
and use existing cube files to visualize frontier molecular orbitals.
.PP
A Psi4 \s-1XYZ\s0 format geometry string is automatically generated for each molecule
in input file. It contains atom symbols and 3D coordinates for each atom in a
molecule. In addition, the formal charge and spin multiplicity are present in the
the geometry string. These values are either retrieved from molecule properties
named 'FormalCharge' and 'SpinMultiplicty' or dynamically calculated for a
molecule.
.PP
A set of cube and \s-1SD\s0 output files is generated for each molecule in input file
as shown below:
.PP
.Vb 1
\&    Ouput dir: <OutfileRoot>_FrontierOrbitals or <OutfilesDir>
\&    
\&    Closed\-shell systems:
\&    
\&    <MolIDPrefix>.sdf
\&    <MolIDPrefix>*HOMO.cube
\&    <MolIDPrefix>*LUMO.cube
\&    
\&    Open\-shell systems:
\&    
\&    <MolIDPrefix>.sdf
\&    <MolIDPrefix>*DOMO.cube
\&    <MolIDPrefix>*LVMO.cube
\&    <MolIDPrefix>*SOMO.cube
\&    
\&    <MolIDPrefix>: Mol<Num>_<MolName>, Mol<Num>, or <MolName>
\&    
\&    Abbreviations:
\&    
\&    HOMO: Highest Occupied Molecular Orbital
\&    LUMO: Lowest Unoccupied Molecular Orbital
\&
\&    DOMO: Double Occupied Molecular Orbital
\&    SOMO: Singly Occupied Molecular Orbital
\&    LVMO: Lowest Virtual (Unoccupied) Molecular Orbital
.Ve
.PP
In addition, a <OutfileRoot>.pml is generated containing  frontier molecular
orbitals for all molecules in input file.
.PP
The supported input file formats are: Mol (.mol), \s-1SD \s0(.sdf, .sd)
.PP
The supported output file formats are: PyMOL script file (.pml)
.PP
A variety of PyMOL groups and objects are  created for visualization of frontier
molecular orbitals as shown below:
.PP
.Vb 1
\&    Closed\-shell systems:
\&    
\&    <MoleculeID>
\&        .Molecule
\&            .Molecule
\&            .BallAndStick
\&        .HOMO
\&            .Alpha
\&                .Cube
\&                .Volume
\&                .Mesh
\&                    .Negative_Phase
\&                    .Positive_Phase
\&                .Surface
\&                    .Negative_Phase
\&                    .Positive_Phase
\&        .LUMO
\&            .Alpha
\&                .Cube
\&                .Volume
\&                .Mesh
\&                    .Negative_Phase
\&                    .Positive_Phase
\&                .Surface
\&                    .Negative_Phase
\&                    .Positive_Phase
\&    <MoleculeID>
\&        .Molecule
\&            ... ... ...
\&        .HOMO
\&            ... ... ...
\&        .LUMO
\&            ... ... ...
\&    
\&    Open\-shell systems:
\&    
\&    <MoleculeID>
\&        .Molecule
\&            .Molecule
\&            .BallAndStick
\&        .DOMO
\&            .Alpha
\&                .Cube
\&                .Volume
\&                .Mesh
\&                    .Negative_Phase
\&                    .Positive_Phase
\&                .Surface
\&                    .Negative_Phase
\&                    .Positive_Phase
\&            .Beta
\&                .Cube
\&                .Volume
\&                .Mesh
\&                    .Negative_Phase
\&                    .Positive_Phase
\&                .Surface
\&                    .Negative_Phase
\&                    .Positive_Phase
\&        .LVMO
\&            .Alpha
\&                .Cube
\&                .Volume
\&                .Mesh
\&                    .Negative_Phase
\&                    .Positive_Phase
\&                .Surface
\&                    .Negative_Phase
\&                    .Positive_Phase
\&            .Beta
\&                .Cube
\&                .Volume
\&                .Mesh
\&                    .Negative_Phase
\&                    .Positive_Phase
\&                .Surface
\&                    .Negative_Phase
\&                    .Positive_Phase
\&        .SOMO
\&            .Alpha
\&                .Cube
\&                .Volume
\&                .Mesh
\&                    .Negative_Phase
\&                    .Positive_Phase
\&                .Surface
\&                    .Negative_Phase
\&                    .Positive_Phase
\&            .Alpha_<Num>
\&                ... ... ...
\&    <MoleculeID>
\&        .Molecule
\&            ... ... ...
\&        .DOMO
\&            ... ... ...
\&        .LVMO
\&            ... ... ...
\&        .SOMO
\&            ... ... ...
.Ve
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\fB\-b, \-\-basisSet\fR <text>  [default: auto]" 4
.IX Item "-b, --basisSet <text> [default: auto]"
Basis set to use for calculating single point energy before generating
cube files for frontier molecular orbitals. Default: 6\-31+G** for sulfur
containing molecules; Otherwise, 6\-31G** [ Ref 150 ]. The specified 
value must be a valid Psi4 basis set. No validation is performed.
.Sp
The following list shows a representative sample of basis sets available
in Psi4:
.Sp
.Vb 5
\&    STO\-3G, 6\-31G, 6\-31+G, 6\-31++G, 6\-31G*, 6\-31+G*,  6\-31++G*, 
\&    6\-31G**, 6\-31+G**, 6\-31++G**, 6\-311G, 6\-311+G, 6\-311++G,
\&    6\-311G*, 6\-311+G*, 6\-311++G*, 6\-311G**, 6\-311+G**, 6\-311++G**,
\&    cc\-pVDZ, cc\-pCVDZ, aug\-cc\-pVDZ, cc\-pVDZ\-DK, cc\-pCVDZ\-DK, def2\-SVP,
\&    def2\-SVPD, def2\-TZVP, def2\-TZVPD, def2\-TZVPP, def2\-TZVPPD
.Ve
.IP "\fB\-e, \-\-examples\fR" 4
.IX Item "-e, --examples"
Print examples.
.IP "\fB\-h, \-\-help\fR" 4
.IX Item "-h, --help"
Print this help message.
.IP "\fB\-i, \-\-infile\fR <infile>" 4
.IX Item "-i, --infile <infile>"
Input file name.
.IP "\fB\-\-infileParams\fR <Name,Value,...>  [default: auto]" 4
.IX Item "--infileParams <Name,Value,...> [default: auto]"
A comma delimited list of parameter name and value pairs for reading
molecules from files. The supported parameter names for different file
formats, along with their default values, are shown below:
.Sp
.Vb 1
\&    SD, MOL: removeHydrogens,no,sanitize,yes,strictParsing,yes
.Ve
.IP "\fB\-m, \-\-methodName\fR <text>  [default: auto]" 4
.IX Item "-m, --methodName <text> [default: auto]"
Method to use for calculating single point energy before generating
cube files for frontier molecular orbitals. Default: B3LYP [ Ref 150 ].
The specified value must be a valid Psi4 method name. No validation is
performed.
.Sp
The following list shows a representative sample of methods available
in Psi4:
.Sp
.Vb 4
\&    B1LYP, B2PLYP, B2PLYP\-D3BJ, B2PLYP\-D3MBJ, B3LYP, B3LYP\-D3BJ,
\&    B3LYP\-D3MBJ, CAM\-B3LYP, CAM\-B3LYP\-D3BJ, HF, HF\-D3BJ,  HF3c, M05,
\&    M06, M06\-2x, M06\-HF, M06\-L, MN12\-L, MN15, MN15\-D3BJ,PBE, PBE0,
\&    PBEH3c, PW6B95, PW6B95\-D3BJ, WB97, WB97X, WB97X\-D, WB97X\-D3BJ
.Ve
.IP "\fB\-\-mode\fR <GenerateCubeFiles, VisualizeCubeFiles, or Both>  [default: Both]" 4
.IX Item "--mode <GenerateCubeFiles, VisualizeCubeFiles, or Both> [default: Both]"
Generate and visualize cube files for frontier molecular orbitals. The 
\&'VisualizeCubes' value skips the generation of new cube files and uses
 existing cube files for visualization of molecular orbitals. Multiprocessing
 is not supported during 'VisualizeCubeFiles' value of '\-\-mode' option.
.IP "\fB\-\-mp\fR <yes or no>  [default: no]" 4
.IX Item "--mp <yes or no> [default: no]"
Use multiprocessing.
.Sp
By default, input data is retrieved in a lazy manner via mp.Pool.\fIimap()\fR
function employing lazy RDKit data iterable. This allows processing of
arbitrary large data sets without any additional requirements memory.
.Sp
All input data may be optionally loaded into memory by mp.Pool.\fImap()\fR
before starting worker processes in a process pool by setting the value
of 'inputDataMode' to 'InMemory' in '\-\-mpParams' option.
.Sp
A word to the wise: The default 'chunkSize' value of 1 during 'Lazy' input
data mode may adversely impact the performance. The '\-\-mpParams' section
provides additional information to tune the value of 'chunkSize'.
.IP "\fB\-\-mpParams\fR <Name,Value,...>  [default: auto]" 4
.IX Item "--mpParams <Name,Value,...> [default: auto]"
A comma delimited list of parameter name and value pairs to configure
multiprocessing.
.Sp
The supported parameter names along with their default and possible
values are shown below:
.Sp
.Vb 3
\&    chunkSize, auto
\&    inputDataMode, Lazy   [ Possible values: InMemory or Lazy ]
\&    numProcesses, auto   [ Default: mp.cpu_count() ]
.Ve
.Sp
These parameters are used by the following functions to configure and
control the behavior of multiprocessing: mp.\fIPool()\fR, mp.Pool.\fImap()\fR, and
mp.Pool.\fIimap()\fR.
.Sp
The chunkSize determines chunks of input data passed to each worker
process in a process pool by mp.Pool.\fImap()\fR and mp.Pool.\fIimap()\fR functions.
The default value of chunkSize is dependent on the value of 'inputDataMode'.
.Sp
The mp.Pool.\fImap()\fR function, invoked during 'InMemory' input data mode,
automatically converts RDKit data iterable into a list, loads all data into
memory, and calculates the default chunkSize using the following method
as shown in its code:
.Sp
.Vb 2
\&    chunkSize, extra = divmod(len(dataIterable), len(numProcesses) * 4)
\&    if extra: chunkSize += 1
.Ve
.Sp
For example, the default chunkSize will be 7 for a pool of 4 worker processes
and 100 data items.
.Sp
The mp.Pool.\fIimap()\fR function, invoked during 'Lazy' input data mode, employs
\&'lazy' RDKit data iterable to retrieve data as needed, without loading all the
data into memory. Consequently, the size of input data is not known a priori.
It's not possible to estimate an optimal value for the chunkSize. The default 
chunkSize is set to 1.
.Sp
The default value for the chunkSize during 'Lazy' data mode may adversely
impact the performance due to the overhead associated with exchanging
small chunks of data. It is generally a good idea to explicitly set chunkSize to
a larger value during 'Lazy' input data mode, based on the size of your input
data and number of processes in the process pool.
.Sp
The mp.Pool.\fImap()\fR function waits for all worker processes to process all
the data and return the results. The mp.Pool.\fIimap()\fR function, however,
returns the the results obtained from worker processes as soon as the
results become available for specified chunks of data.
.Sp
The order of data in the results returned by both mp.Pool.\fImap()\fR and 
mp.Pool.\fIimap()\fR functions always corresponds to the input data.
.IP "\fB\-o, \-\-outfile\fR <outfile>" 4
.IX Item "-o, --outfile <outfile>"
Output file name for PyMOL \s-1PML\s0 file. The \s-1PML\s0 output file, along with cube
files, is generated in a local directory corresponding to '\-\-outfilesDir'
option.
.IP "\fB\-\-outfilesDir\fR <text>  [default: auto]" 4
.IX Item "--outfilesDir <text> [default: auto]"
Directory name containing \s-1PML\s0 and cube files. Default:
   <OutfileRoot>_FrontierOrbitals. This directory must be present during
\&'VisualizeCubeFiles' value of '\-\-mode' option.
.IP "\fB\-\-outfilesMolPrefix\fR <MolNum, MolName, Both>  [default: Both]" 4
.IX Item "--outfilesMolPrefix <MolNum, MolName, Both> [default: Both]"
Molecule prefix to use for the names of cube files. Possible values:
MolNum, MolName, or Both. By default, both molecule number and name
are used. The format of molecule prefix is as follows: MolNum \- Mol<Num>;
MolName \- <MolName>, Both: Mol<Num>_<MolName>. Empty molecule names
are ignored. Molecule numbers are used for empty molecule names.
.IP "\fB\-\-overwrite\fR" 4
.IX Item "--overwrite"
Overwrite existing files.
.IP "\fB\-\-psi4CubeFilesParams\fR <Name,Value,...>  [default: auto]" 4
.IX Item "--psi4CubeFilesParams <Name,Value,...> [default: auto]"
A comma delimited list of parameter name and value pairs for generating
Psi4 cube files.
.Sp
The supported parameter names along with their default and possible
values are shown below:
.Sp
.Vb 1
\&    gridSpacing, 0.2, gridOverage, 4.0, isoContourThreshold, 0.85
.Ve
.Sp
gridSpacing: Grid spacing for generating cube files. Units: Bohr. A higher
value reduces the size of the cube files on the disk. This option corresponds
to Psi4 option \s-1CUBIC_GRID_SPACING.\s0
.Sp
gridOverage: Grid overage for generating cube files. Units: Bohr.This option
corresponds to Psi4 option \s-1CUBIC_GRID_OVERAGE.\s0
.Sp
isoContourThreshold: IsoContour values for generating cube files that capture
specified percent of the probability density using the least amount of grid
points. Default: 0.85 (85%). This option corresponds to Psi4 option
\&\s-1CUBEPROP_ISOCONTOUR_THRESHOLD.\s0
.IP "\fB\-\-psi4OptionsParams\fR <Name,Value,...>  [default: none]" 4
.IX Item "--psi4OptionsParams <Name,Value,...> [default: none]"
A comma delimited list of Psi4 option name and value pairs for setting
global and module options. The names are 'option_name' for global options
and 'module_name_\|_option_name' for options local to a module. The
specified option names must be valid Psi4 names. No validation is
performed.
.Sp
The specified option name and  value pairs are processed and passed to
psi4.\fIset_options()\fR as a dictionary. The supported value types are float,
integer, boolean, or string. The float value string is converted into a float.
The valid values for a boolean string are yes, no, true, false, on, or off.
.IP "\fB\-\-psi4RunParams\fR <Name,Value,...>  [default: auto]" 4
.IX Item "--psi4RunParams <Name,Value,...> [default: auto]"
A comma delimited list of parameter name and value pairs for configuring
Psi4 jobs.
.Sp
The supported parameter names along with their default and possible
values are shown below:
.Sp
.Vb 5
\&    MemoryInGB, 1
\&    NumThreads, 1
\&    OutputFile, auto   [ Possible  values: stdout, quiet, or FileName ]
\&    ScratchDir, auto   [ Possivle values: DirName]
\&    RemoveOutputFile, yes   [ Possible values: yes, no, true, or false]
.Ve
.Sp
These parameters control the runtime behavior of Psi4.
.Sp
The default file name for 'OutputFile' is <InFileRoot>_Psi4.out. The \s-1PID\s0
is appended to output file name during multiprocessing as shown:
<InFileRoot>_Psi4_<PIDNum>.out. The 'stdout' value for 'OutputType'
sends Psi4 output to stdout. The 'quiet' or 'devnull' value suppresses
all Psi4 output.
.Sp
The default 'Yes' value of 'RemoveOutputFile' option forces the removal
of any existing Psi4 before creating new files to append output from
multiple Psi4 runs.
.Sp
The option 'ScratchDir' is a directory path to the location of scratch
files. The default value corresponds to Psi4 default. It may be used to
override the deafult path.
.IP "\fB\-\-pymolViewParams\fR <Name,Value,...>  [default: auto]" 4
.IX Item "--pymolViewParams <Name,Value,...> [default: auto]"
A comma delimited list of parameter name and value pairs for visualizing
cube files in PyMOL.
.Sp
.Vb 9
\&    contourColor1, red, contourColor2, blue,
\&    contourLevel1, auto, contourLevel2, auto,
\&    contourLevelAutoAt, 0.75,
\&    displayMolecule, BallAndStick, displaySphereScale, 0.2,
\&    displayStickRadius, 0.1, hideHydrogens, yes,
\&    meshWidth, 0.5, meshQuality, 2,
\&    surfaceQuality, 2, surfaceTransparency, 0.25,
\&    volumeColorRamp, auto, volumeColorRampOpacity,0.2
\&    volumeContourWindowFactor,0.05
.Ve
.Sp
contourColor1 and contourColor2: Color to use for visualizing volumes,
meshes, and surfaces corresponding to the negative and positive values
in cube files. The specified values must be valid PyMOL color names. No
validation is performed.
.Sp
contourLevel1 and contourLevel2: Contour levels to use for visualizing
volumes, meshes, and surfaces corresponding to the negative and positive
values in cube files. Default: auto. The specified values for contourLevel1
and contourLevel2 must be negative and positive numbers.
.Sp
The contour levels are automatically calculated by default. The isocontour
range for specified percent of the density is retrieved from the cube files.
The contour levels are set at 'contourLevelAutoAt' of the absolute maximum
value of the isocontour range. For example: contour levels are set to plus and
minus 0.03 at 'contourLevelAutoAt' of 0.5 for isocontour range of \-0.06 to
0.06 covering specified percent of the density.
.Sp
contourLevelAutoAt: Set contour levels at specified fraction of the absolute
maximum value of the isocontour range retrieved from  the cube files. This
option is only used during the automatic calculations of the contour levels.
.Sp
hideHydrogens: Hide hydrogens in molecules. Default: yes. Possible
values: yes or no.
.Sp
displayMolecule: Display mode for molecules. Possible values: Sticks or
BallAndStick. Both displays objects are created for molecules.
.Sp
displaySphereScale: Sphere scale for displaying molecule during
BallAndStick display.
.Sp
displayStickRadius: Stick radius  for displaying molecule during Sticks
and BallAndStick display.
.Sp
hideHydrogens: Hide hydrogens in molecules. Default: yes. Possible
values: yes or no.
meshWidth: Line width for mesh lines to visualize cube files.
.Sp
meshQuality: Mesh quality for meshes to visualize cube files. The
higher values represents better quality.
.Sp
meshWidth: Line width for mesh lines to visualize cube files.
.Sp
surfaceQuality: Surface quality for surfaces to visualize cube files.
The higher values represents better quality.
.Sp
surfaceTransparency: Surface transparency for surfaces to visualize cube
files.
.Sp
volumeColorRamp: Name of a PyMOL volume color ramp to use for visualizing
cube files. Default name(s): <OutfielsMolPrefix>_psi4_cube_mo or psi4_cube_mo
The default volume color ramps are automatically generated using contour
levels and colors during 'auto' value of 'volumeColorRamp'. An explicitly
specified value must be a valid PyMOL volume color ramp. No validation is
preformed.
.Sp
VolumeColorRampOpacity: Opacity for generating volume color ramps
for visualizing cube files. This value is equivalent to 1 minus Transparency.
.Sp
volumeContourWindowFactor: Fraction of contour level representing  window
widths around contour levels during generation of volume color ramps for
visualizing cube files. For example, the value of 0.05 implies a ramp window
size of 0.0015 at contour level of 0.03.
.IP "\fB\-q, \-\-quiet\fR <yes or no>  [default: no]" 4
.IX Item "-q, --quiet <yes or no> [default: no]"
Use quiet mode. The warning and information messages will not be printed.
.IP "\fB\-r, \-\-reference\fR <text>  [default: auto]" 4
.IX Item "-r, --reference <text> [default: auto]"
Reference wave function to use for calculating single point energy before
generating cube files for frontier molecular orbitals. Default: \s-1RHF\s0 or \s-1UHF.\s0
The default values are Restricted Hartree-Fock (\s-1RHF\s0) for closed-shell molecules
with all electrons paired and Unrestricted artree-Fock (\s-1UHF\s0) for open-shell
molecules with unpaired electrons.
.Sp
The specified value must be a valid Psi4 reference wave function. No validation
is performed. For example: \s-1ROHF, CUHF, RKS,\s0 etc.
.Sp
The spin multiplicity determines the default value of reference wave function
for input molecules. It is calculated from number of free radical electrons using
Hund's rule of maximum multiplicity defined as 2S + 1 where S is the total
electron spin. The total spin is 1/2 the number of free radical electrons in a 
molecule. The value of 'SpinMultiplicity' molecule property takes precedence
over the calculated value of spin multiplicity.
.IP "\fB\-w, \-\-workingdir\fR <dir>" 4
.IX Item "-w, --workingdir <dir>"
Location of working directory which defaults to the current directory.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
To generate and visualize frontier molecular orbitals based on a single point 
energy calculation using  B3LYP/6\-31G** and B3LYP/6\-31+G** for non-sulfur
and sulfur containing molecules in a \s-1SD\s0 file with 3D structures, use \s-1RHF\s0 and
\&\s-1UHF\s0 for closed-shell and open-shell molecules, and write a new \s-1PML\s0 file, type:
.PP
.Vb 2
\&    % Psi4VisualizeFrontierOrbitals.py \-i Psi4Sample3D.sdf
\&      \-o Psi4Sample3DOut.pml
.Ve
.PP
To run the first example to only generate cube files and skip generation of 
a \s-1PML\s0 file to visualize frontier molecular orbitals, type:
.PP
.Vb 2
\&    % Psi4VisualizeFrontierOrbitals.py \-\-mode GenerateCubeFiles
\&      \-i Psi4Sample3D.sdf \-o Psi4Sample3DOut.pml
.Ve
.PP
To run the first example to skip generation of cube files and use existing cube
files to visualize frontier molecular orbitals and write out a \s-1PML\s0 file, type:
.PP
.Vb 2
\&    % Psi4VisualizeFrontierOrbitals.py \-\-mode VisualizeCubeFiles
\&      \-i Psi4Sample3D.sdf \-o Psi4Sample3DOut.pml
.Ve
.PP
To run the first example in multiprocessing mode on all available CPUs
without loading all data into memory and write out a \s-1PML\s0 file, type:
.PP
.Vb 2
\&    % Psi4VisualizeFrontierOrbitals.py \-\-mp yes \-i Psi4Sample3D.sdf
\&        \-o Psi4Sample3DOut.pml
.Ve
.PP
To run the first example in multiprocessing mode on all available CPUs
by loading all data into memory and write out a \s-1PML\s0 file, type:
.PP
.Vb 2
\&    % Psi4VisualizeFrontierOrbitals.py  \-\-mp yes \-\-mpParams "inputDataMode,
\&        InMemory" \-i Psi4Sample3D.sdf  \-o Psi4Sample3DOut.pml
.Ve
.PP
To run the first example in multiprocessing mode on all available CPUs
without loading all data into memory along with multiple threads for each
Psi4 run and write out a \s-1SD\s0 file, type:
.PP
.Vb 2
\&    % Psi4VisualizeFrontierOrbitals.py \-\-mp yes \-\-psi4RunParams
\&      "NumThreads,2" \-i Psi4Sample3D.sdf \-o Psi4Sample3DOut.pml
.Ve
.PP
To run the first example in using a specific set of parameters to generate and
visualize frontier molecular orbitals and write out  a \s-1PML\s0 file, type:
.PP
.Vb 7
\&    % Psi4VisualizeFrontierOrbitals.py  \-\-mode both \-m SCF \-b aug\-cc\-pVDZ 
\&      \-\-psi4CubeFilesParams "gridSpacing, 0.2, gridOverage, 4.0"
\&      \-\-psi4RunParams "MemoryInGB, 2" \-\-pymolViewParams "contourColor1,
\&      red, contourColor2, blue,contourLevel1, \-0.04, contourLevel2, 0.04,
\&      contourLevelAutoAt, 0.75,volumeColorRamp, auto,
\&      volumeColorRampOpacity,0.25, volumeContourWindowFactor,0.05"
\&      \-i Psi4Sample3D.sdf \-o Psi4Sample3DOut.pml
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Manish Sud(msud@san.rr.com)
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Psi4PerformMinimization.py, Psi4GenerateConformers.py,
Psi4VisualizeDualDescriptors.py, Psi4VisualizeElectrostaticPotential.py
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2022 Manish Sud. All rights reserved.
.PP
The functionality available in this script is implemented using Psi4, an
open source quantum chemistry software package, and RDKit, an open
source toolkit for cheminformatics developed by Greg Landrum.
.PP
This file is part of MayaChemTools.
.PP
MayaChemTools is free software; you can redistribute it and/or modify it under
the terms of the \s-1GNU\s0 Lesser General Public License as published by the Free
Software Foundation; either version 3 of the License, or (at your option) any
later version.
