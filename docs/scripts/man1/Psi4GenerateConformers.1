.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Psi4GenerateConformers 1"
.TH Psi4GenerateConformers 1 "2022-09-25" "perl v5.22.4" "MayaChemTools"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Psi4GenerateConformers.py \- Generate molecular conformations
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Psi4GenerateConformers.py [\fB\-\-basisSet\fR <text>] [\fB\-\-confParams\fR <Name,Value,...>] [\fB\-\-energyOut\fR <yes or no>]
[\fB\-\-energyDataFieldLabel\fR <text>] [\fB\-\-energyUnits\fR <text>] [\fB\-\-energyRMSDCalcMode\fR <\s-1RMSD\s0 or BestRMSD>]
[\fB\-\-energyRMSDCutoff\fR <number>] [\fB\-\-energyRMSDCutoffMode\fR <All or Lowest>] [\fB\-\-energyWindow\fR <number>]
[\fB\-\-infileParams\fR <Name,Value,...>] [\fB\-\-maxIters\fR <number>]
[\fB\-\-methodName\fR <text>] [\fB\-\-mp\fR <yes or no>] [\fB\-\-mpLevel\fR <Molecules or Conformers>]
[\fB\-\-mpParams\fR <Name, Value,...>] [ \fB\-\-outfileParams\fR <Name,Value,...> ] [\fB\-\-overwrite\fR] [\fB\-\-precision\fR <number>]
[\fB\-\-psi4OptionsParams\fR <Name,Value,...>] [\fB\-\-psi4RunParams\fR <Name,Value,...>]
[\fB\-\-quiet\fR <yes or no>] [\fB\-\-reference\fR <text>] [\fB\-\-recenterAndReorient\fR <yes or no>]
[\fB\-\-symmetrize\fR <yes or no>] [\fB\-\-symmetrizeTolerance\fR <number>] [\fB\-w\fR <dir>] \fB\-i\fR <infile> \fB\-o\fR <outfile>
.PP
Psi4GenerateConformers.py \fB\-h\fR | \fB\-\-help\fR | \fB\-e\fR | \fB\-\-examples\fR
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Generate 3D conformers of molecules using a combination of distance geometry
and forcefield minimization followed by geometry optimization using a quantum
chemistry method. A set of initial 3D structures are generated for a molecule 
employing distance geometry. The 3D structures in the conformation ensemble
are sequentially minimized using forcefield and a quantum chemistry method.
.PP
A Psi4 \s-1XYZ\s0 format geometry string is automatically generated for each molecule
in input file. It contains atom symbols and 3D coordinates for each atom in a
molecule. In addition, the formal charge and spin multiplicity are present in the
the geometry string. These values are either retrieved from molecule properties
named 'FormalCharge' and 'SpinMultiplicty' or dynamically calculated for a
molecule.
.PP
The supported input file formats are: Mol (.mol), \s-1SD \s0(.sdf, .sd), \s-1SMILES \s0(.smi,
\&.csv, .tsv .txt)
.PP
The supported output file formats are: \s-1SD \s0(.sdf, .sd)
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\fB\-b, \-\-basisSet\fR <text>  [default: auto]" 4
.IX Item "-b, --basisSet <text> [default: auto]"
Basis set to use for energy minimization. Default: 6\-31+G** for sulfur
containing molecules; Otherwise, 6\-31G** [ Ref 150 ]. The specified 
value must be a valid Psi4 basis set. No validation is performed.
.Sp
The following list shows a representative sample of basis sets available
in Psi4:
.Sp
.Vb 5
\&    STO\-3G, 6\-31G, 6\-31+G, 6\-31++G, 6\-31G*, 6\-31+G*,  6\-31++G*, 
\&    6\-31G**, 6\-31+G**, 6\-31++G**, 6\-311G, 6\-311+G, 6\-311++G,
\&    6\-311G*, 6\-311+G*, 6\-311++G*, 6\-311G**, 6\-311+G**, 6\-311++G**,
\&    cc\-pVDZ, cc\-pCVDZ, aug\-cc\-pVDZ, cc\-pVDZ\-DK, cc\-pCVDZ\-DK, def2\-SVP,
\&    def2\-SVPD, def2\-TZVP, def2\-TZVPD, def2\-TZVPP, def2\-TZVPPD
.Ve
.IP "\fB\-\-confParams\fR <Name,Value,...>  [default: auto]" 4
.IX Item "--confParams <Name,Value,...> [default: auto]"
Generate an initial 3D conformation ensemble using distance geometry and
forcefield minimization before final geometry optimization by a specified
method name and basis set. Possible values: yes or no.
.Sp
A comma delimited list of parameter name and value pairs for generating
initial sets of 3D conformations for molecules. The 3D conformation ensemble
is generated using distance geometry and forcefield functionality available
in RDKit. The 3D structures in the conformation ensemble are subsequently
minimized by a quantum chemistry method available in Psi4.
.Sp
The supported parameter names along with their default values are shown
below:
.Sp
.Vb 4
\&    confMethod,ETKDG,
\&    forceField,MMFF, forceFieldMMFFVariant,MMFF94,
\&    enforceChirality,yes,alignConformers,yes, embedRMSDCutoff,0.5,
\&    maxConfs,50,maxIters,250,randomSeed,auto
\&    
\&    confMethod,ETKDG   [ Possible values: SDG, ETDG, KDG, ETKDG ]
\&    forceField, MMFF   [ Possible values: UFF or MMFF ]
\&    forceFieldMMFFVariant,MMFF94   [ Possible values: MMFF94 or MMFF94s ]
\&    enforceChirality,yes   [ Possible values: yes or no ]
\&    alignConformers,yes   [ Possible values: yes or no ]
\&    embedRMSDCutoff,0.5   [ Possible values: number or None]
.Ve
.Sp
confMethod: Conformation generation methodology for generating initial 3D
coordinates. Possible values: Standard Distance Geometry (\s-1SDG\s0), Experimental
Torsion-angle preference with Distance Geometry (\s-1ETDG\s0), basic Knowledge-terms
with Distance Geometry (\s-1KDG\s0) and Experimental Torsion-angle preference
along with basic Knowledge-terms with Distance Geometry (\s-1ETKDG\s0) [Ref 129] .
.Sp
forceField: Forcefield method to use for energy minimization. Possible
values: Universal Force Field (\s-1UFF\s0) [ Ref 81 ] or Merck Molecular Mechanics
Force Field [ Ref 83\-87 ] .
.Sp
enforceChirality: Enforce chirality for defined chiral centers during
forcefield minimization.
.Sp
alignConformers: Align conformers for each molecule.
.Sp
maxConfs: Maximum number of conformations to generate for each molecule
during the generation of an initial 3D conformation ensemble using 
conformation generation methodology. The conformations are minimized
using the specified forcefield and a quantum chemistry method. The lowest
energy conformation is written to the output file.
.Sp
embedRMSDCutoff: \s-1RMSD\s0 cutoff for retaining initial set of conformers embedded
using distance geometry and before forcefield minimization. All embedded
conformers are kept for 'None' value. Otherwise, only those conformers which
are different from each other by the specified \s-1RMSD\s0 cutoff, 0.5 by default,
are kept. The first embedded conformer is always retained.
.Sp
maxIters: Maximum number of iterations to perform for each conformation
during forcefield minimization.
.Sp
randomSeed: Seed for the random number generator for reproducing initial
3D coordinates in a conformation ensemble. Default is to use a random seed.
.IP "\fB\-\-energyOut\fR <yes or no>  [default: yes]" 4
.IX Item "--energyOut <yes or no> [default: yes]"
Write out energy values.
.IP "\fB\-\-energyDataFieldLabel\fR <text>  [default: auto]" 4
.IX Item "--energyDataFieldLabel <text> [default: auto]"
Energy data field label for writing energy values. Default: Psi4_Energy (<Units>).
.IP "\fB\-\-energyUnits\fR <text>  [default: kcal/mol]" 4
.IX Item "--energyUnits <text> [default: kcal/mol]"
Energy units. Possible values: Hartrees, kcal/mol, kJ/mol, or eV.
.IP "\fB\-\-energyRMSDCalcMode\fR <\s-1RMSD\s0 or BestRMSD>  [default: \s-1RMSD\s0]" 4
.IX Item "--energyRMSDCalcMode <RMSD or BestRMSD> [default: RMSD]"
Methodology for calculating \s-1RMSD\s0 values during the application of \s-1RMSD\s0
cutoff for retaining conformations after the final energy minimization. Possible
values: \s-1RMSD\s0 or BestRMSD. This option is ignore during 'None' value of
\&'\-\-energyRMSDCutoff' option.
.Sp
During BestRMSMode mode, the RDKit 'function AllChem.GetBestRMS' is used to
align and calculate \s-1RMSD.\s0 This function calculates optimal \s-1RMSD\s0 for aligning two
molecules, taking symmetry into account. Otherwise, the \s-1RMSD\s0 value is calculated
using 'AllChem.GetConformerRMS' without changing the atom order. A word to the
wise from RDKit documentation: The AllChem.GetBestRMS function will attempt to
align all permutations of matching atom orders in both molecules, for some molecules
it will lead to 'combinatorial explosion'.
.IP "\fB\-\-energyRMSDCutoff\fR <number>  [default: 0.5]" 4
.IX Item "--energyRMSDCutoff <number> [default: 0.5]"
\&\s-1RMSD\s0 cutoff for retaining conformations after the final energy minimization.
By default, only those conformations which are different from the lowest
energy conformation by the specified \s-1RMSD\s0 cutoff and are with in the 
specified energy window are kept. The lowest energy conformation is always
retained. A value of zero keeps all minimized conformations with in the
specified energy window from the lowest energy.
.IP "\fB\-\-energyRMSDCutoffMode\fR <All or Lowest>  [default: All]" 4
.IX Item "--energyRMSDCutoffMode <All or Lowest> [default: All]"
\&\s-1RMSD\s0 cutoff mode for  retaining conformations after the final energy
minimization. Possible values: All or Lowest. The \s-1RMSD\s0 values are compared
against all the selected conformations or the lowest energy conformation during
\&'All' and 'Lowest' value of '\-\-energyRMSDCutoffMode'. This option is ignored
during 'None' value of \-\-energyRMSDCutoff.
.Sp
By default, only those conformations which all different from all selected
conformations by the specified \s-1RMSD\s0 cutoff and are with in the specified
energy window are kept.
.IP "\fB\-\-energyWindow\fR <number>  [default: auto]" 4
.IX Item "--energyWindow <number> [default: auto]"
Psi4 Energy window  for selecting conformers after the final energy minimization.
The default value is dependent on '\-\-energyUnits': 20 kcal/mol, 83.68 kJ/mol,
0.8673 ev, or 0.03188 Hartrees. The specified value must be in '\-\-energyUnits'.
.IP "\fB\-e, \-\-examples\fR" 4
.IX Item "-e, --examples"
Print examples.
.IP "\fB\-h, \-\-help\fR" 4
.IX Item "-h, --help"
Print this help message.
.IP "\fB\-i, \-\-infile\fR <infile>" 4
.IX Item "-i, --infile <infile>"
Input file name.
.IP "\fB\-\-infileParams\fR <Name,Value,...>  [default: auto]" 4
.IX Item "--infileParams <Name,Value,...> [default: auto]"
A comma delimited list of parameter name and value pairs for reading
molecules from files. The supported parameter names for different file
formats, along with their default values, are shown below:
.Sp
.Vb 3
\&    SD, MOL: removeHydrogens,no,sanitize,yes,strictParsing,yes
\&    SMILES: smilesColumn,1,smilesNameColumn,2,smilesDelimiter,space,
\&        smilesTitleLine,auto,sanitize,yes
.Ve
.Sp
Possible values for smilesDelimiter: space, comma or tab.
.IP "\fB\-\-maxIters\fR <number>  [default: 50]" 4
.IX Item "--maxIters <number> [default: 50]"
Maximum number of iterations to perform for each molecule or conformer
during energy minimization by a quantum chemistry method.
.IP "\fB\-m, \-\-methodName\fR <text>  [default: auto]" 4
.IX Item "-m, --methodName <text> [default: auto]"
Method to use for energy minimization. Default: B3LYP [ Ref 150 ]. The
specified value must be a valid Psi4 method name. No validation is
performed.
.Sp
The following list shows a representative sample of methods available
in Psi4:
.Sp
.Vb 4
\&    B1LYP, B2PLYP, B2PLYP\-D3BJ, B2PLYP\-D3MBJ, B3LYP, B3LYP\-D3BJ,
\&    B3LYP\-D3MBJ, CAM\-B3LYP, CAM\-B3LYP\-D3BJ, HF, HF\-D3BJ,  HF3c, M05,
\&    M06, M06\-2x, M06\-HF, M06\-L, MN12\-L, MN15, MN15\-D3BJ,PBE, PBE0,
\&    PBEH3c, PW6B95, PW6B95\-D3BJ, WB97, WB97X, WB97X\-D, WB97X\-D3BJ
.Ve
.IP "\fB\-\-mp\fR <yes or no>  [default: no]" 4
.IX Item "--mp <yes or no> [default: no]"
Use multiprocessing.
.Sp
By default, input data is retrieved in a lazy manner via mp.Pool.\fIimap()\fR
function employing lazy RDKit data iterable. This allows processing of
arbitrary large data sets without any additional requirements memory.
.Sp
All input data may be optionally loaded into memory by mp.Pool.\fImap()\fR
before starting worker processes in a process pool by setting the value
of 'inputDataMode' to 'InMemory' in '\-\-mpParams' option.
.Sp
A word to the wise: The default 'chunkSize' value of 1 during 'Lazy' input
data mode may adversely impact the performance. The '\-\-mpParams' section
provides additional information to tune the value of 'chunkSize'.
.IP "\fB\-\-mpLevel\fR <Molecules or Conformers>  [default: Molecules]" 4
.IX Item "--mpLevel <Molecules or Conformers> [default: Molecules]"
Perform multiprocessing at molecules or conformers level. Possible values:
Molecules or Conformers. The 'Molecules' value starts a process pool at the
molecules level. All conformers of a molecule are processed in a single
process. The 'Conformers' value, however, starts a process pool at the 
conformers level. Each conformer of a molecule is processed in an individual
process in the process pool. The default Psi4 'OutputFile' is set to 'quiet'
using '\-\-psi4RunParams' for 'Conformers' level. Otherwise, it may generate
a large number of Psi4 output files.
.IP "\fB\-\-mpParams\fR <Name,Value,...>  [default: auto]" 4
.IX Item "--mpParams <Name,Value,...> [default: auto]"
A comma delimited list of parameter name and value pairs to configure
multiprocessing.
.Sp
The supported parameter names along with their default and possible
values are shown below:
.Sp
.Vb 3
\&    chunkSize, auto
\&    inputDataMode, Lazy   [ Possible values: InMemory or Lazy ]
\&    numProcesses, auto   [ Default: mp.cpu_count() ]
.Ve
.Sp
These parameters are used by the following functions to configure and
control the behavior of multiprocessing: mp.\fIPool()\fR, mp.Pool.\fImap()\fR, and
mp.Pool.\fIimap()\fR.
.Sp
The chunkSize determines chunks of input data passed to each worker
process in a process pool by mp.Pool.\fImap()\fR and mp.Pool.\fIimap()\fR functions.
The default value of chunkSize is dependent on the value of 'inputDataMode'.
.Sp
The mp.Pool.\fImap()\fR function, invoked during 'InMemory' input data mode,
automatically converts RDKit data iterable into a list, loads all data into
memory, and calculates the default chunkSize using the following method
as shown in its code:
.Sp
.Vb 2
\&    chunkSize, extra = divmod(len(dataIterable), len(numProcesses) * 4)
\&    if extra: chunkSize += 1
.Ve
.Sp
For example, the default chunkSize will be 7 for a pool of 4 worker processes
and 100 data items.
.Sp
The mp.Pool.\fIimap()\fR function, invoked during 'Lazy' input data mode, employs
\&'lazy' RDKit data iterable to retrieve data as needed, without loading all the
data into memory. Consequently, the size of input data is not known a priori.
It's not possible to estimate an optimal value for the chunkSize. The default 
chunkSize is set to 1.
.Sp
The default value for the chunkSize during 'Lazy' data mode may adversely
impact the performance due to the overhead associated with exchanging
small chunks of data. It is generally a good idea to explicitly set chunkSize to
a larger value during 'Lazy' input data mode, based on the size of your input
data and number of processes in the process pool.
.Sp
The mp.Pool.\fImap()\fR function waits for all worker processes to process all
the data and return the results. The mp.Pool.\fIimap()\fR function, however,
returns the the results obtained from worker processes as soon as the
results become available for specified chunks of data.
.Sp
The order of data in the results returned by both mp.Pool.\fImap()\fR and 
mp.Pool.\fIimap()\fR functions always corresponds to the input data.
.IP "\fB\-o, \-\-outfile\fR <outfile>" 4
.IX Item "-o, --outfile <outfile>"
Output file name.
.IP "\fB\-\-outfileParams\fR <Name,Value,...>  [default: auto]" 4
.IX Item "--outfileParams <Name,Value,...> [default: auto]"
A comma delimited list of parameter name and value pairs for writing
molecules to files. The supported parameter names for different file
formats, along with their default values, are shown below:
.Sp
.Vb 1
\&    SD: kekulize,yes
.Ve
.IP "\fB\-\-overwrite\fR" 4
.IX Item "--overwrite"
Overwrite existing files.
.IP "\fB\-\-precision\fR <number>  [default: 6]" 4
.IX Item "--precision <number> [default: 6]"
Floating point precision for writing energy values.
.IP "\fB\-\-psi4OptionsParams\fR <Name,Value,...>  [default: none]" 4
.IX Item "--psi4OptionsParams <Name,Value,...> [default: none]"
A comma delimited list of Psi4 option name and value pairs for setting
global and module options. The names are 'option_name' for global options
and 'module_name_\|_option_name' for options local to a module. The
specified option names must be valid Psi4 names. No validation is
performed.
.Sp
The specified option name and  value pairs are processed and passed to
psi4.\fIset_options()\fR as a dictionary. The supported value types are float,
integer, boolean, or string. The float value string is converted into a float.
The valid values for a boolean string are yes, no, true, false, on, or off.
.IP "\fB\-\-psi4RunParams\fR <Name,Value,...>  [default: auto]" 4
.IX Item "--psi4RunParams <Name,Value,...> [default: auto]"
A comma delimited list of parameter name and value pairs for configuring
Psi4 jobs.
.Sp
The supported parameter names along with their default and possible
values are shown below:
.Sp
.Vb 5
\&    MemoryInGB, 1
\&    NumThreads, 1
\&    OutputFile, auto   [ Possible  values: stdout, quiet, or FileName ]
\&    ScratchDir, auto   [ Possivle values: DirName]
\&    RemoveOutputFile, yes   [ Possible values: yes, no, true, or false]
.Ve
.Sp
These parameters control the runtime behavior of Psi4.
.Sp
The default file name for 'OutputFile' is <InFileRoot>_Psi4.out. The \s-1PID\s0
is appended to output file name during multiprocessing as shown:
<InFileRoot>_Psi4_<PIDNum>.out. The 'stdout' value for 'OutputType'
sends Psi4 output to stdout. The 'quiet' or 'devnull' value suppresses
all Psi4 output. The 'OutputFile' is set to 'quiet' for 'auto' value during 
\&'Conformers' of '\-\-mpLevel' option.
.Sp
The default 'Yes' value of 'RemoveOutputFile' option forces the removal
of any existing Psi4 before creating new files to append output from
multiple Psi4 runs.
.Sp
The option 'ScratchDir' is a directory path to the location of scratch
files. The default value corresponds to Psi4 default. It may be used to
override the deafult path.
.IP "\fB\-q, \-\-quiet\fR <yes or no>  [default: no]" 4
.IX Item "-q, --quiet <yes or no> [default: no]"
Use quiet mode. The warning and information messages will not be printed.
.IP "\fB\-r, \-\-reference\fR <text>  [default: auto]" 4
.IX Item "-r, --reference <text> [default: auto]"
Reference wave function to use for energy calculation. Default: \s-1RHF\s0 or \s-1UHF.\s0
The default values are Restricted Hartree-Fock (\s-1RHF\s0) for closed-shell molecules
with all electrons paired and Unrestricted Hartree-Fock (\s-1UHF\s0) for open-shell
molecules with unpaired electrons.
.Sp
The specified value must be a valid Psi4 reference wave function. No validation
is performed. For example: \s-1ROHF, CUHF, RKS,\s0 etc.
.Sp
The spin multiplicity determines the default value of reference wave function
for input molecules. It is calculated from number of free radical electrons using
Hund's rule of maximum multiplicity defined as 2S + 1 where S is the total
electron spin. The total spin is 1/2 the number of free radical electrons in a 
molecule. The value of 'SpinMultiplicity' molecule property takes precedence
over the calculated value of spin multiplicity.
.IP "\fB\-\-recenterAndReorient\fR <yes or no>  [default: yes]" 4
.IX Item "--recenterAndReorient <yes or no> [default: yes]"
Recenter and reorient a molecule during creation of a Psi4 molecule from
a geometry string.
.Sp
The 'No' values allows the minimization of a molecule in its initial 3D
coordinate space generated by RDKit.
.IP "\fB\-\-symmetrize\fR <yes or no>  [default: auto]" 4
.IX Item "--symmetrize <yes or no> [default: auto]"
Symmetrize molecules before energy minimization. Default: 'Yes' during
\&'Yes' value of '\-\-recenterAndReorient'; Otherwise, 'No'. The psi4 function,
psi4mol.symmetrize( SymmetrizeTolerance), is called to symmetrize
the molecule before calling psi4.\fIoptimize()\fR.
.Sp
The 'No' value of '\-\-symmetrize' during 'Yes' value of '\-\-recenterAndReorient'
may cause psi4.\fIoptimize()\fR to fail with a 'Point group changed...' error
message.
.IP "\fB\-\-symmetrizeTolerance\fR <number>  [default: 0.01]" 4
.IX Item "--symmetrizeTolerance <number> [default: 0.01]"
Symmetry tolerance for '\-\-symmetrize'.
.IP "\fB\-w, \-\-workingdir\fR <dir>" 4
.IX Item "-w, --workingdir <dir>"
Location of working directory which defaults to the current directory.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
To generate an initial conformer ensemble of up to 50 conformations using a
combination of \s-1ETKDG\s0 distance geometry methodology, applying embed \s-1RMSD\s0
cutoff of 0.5 and \s-1MMFF\s0 forcefield minimization, followed by energy minimization
using B3LYP/6\-31G** or B3LYP/6\-31+G** (sulfur containing), selecting a final set
of minimized conformers for molecules in a \s-1SMILES\s0 file, applying energy \s-1RMSD\s0
cutoff of 0.5 and energy window value value of 20 kcal/mol, and write out a \s-1SD\s0
file containing minimized conformers, type:
.PP
.Vb 1
\&    % Psi4GenerateConformers.py \-i Psi4Sample.smi \-o Psi4SampleOut.sdf
.Ve
.PP
To run the first example in a quiet mode and write out a \s-1SD\s0 file, type:
.PP
.Vb 2
\&    % Psi4GenerateConformers.py \-q yes \-i Psi4Sample.smi \-o
\&      Psi4SampleOut.sdf
.Ve
.PP
To run the first example in multiprocessing mode at molecules level on all
available CPUs without loading all data into memory and write out a \s-1SD\s0 file,
type:
.PP
.Vb 2
\&    % Psi4GenerateConformers.py \-\-mp yes \-i Psi4Sample.smi \-o
\&      Psi4SampleOut.sdf
.Ve
.PP
To run the first example in multiprocessing mode at conformers level on all
available CPUs without loading all data into memory and write out a \s-1SD\s0 file,
type:
.PP
.Vb 2
\&    % Psi4GenerateConformers.py \-\-mp yes \-\-mpLevel Conformers
\&      \-i Psi4Sample.smi \-o Psi4SampleOut.sdf
.Ve
.PP
To run the first example in multiprocessing mode at molecules level on specific
number of CPUs and chunk size without loading all data into memory and write
out a \s-1SD\s0 file, type:
.PP
.Vb 2
\&    % Psi4GenerateConformers.py  \-\-mp yes \-\-mpParams "inputDataMode,Lazy,
\&      numProcesses,4,chunkSize,8" \-i Psi4Sample.smi \-o Psi4SampleOut.sdf
.Ve
.PP
To run the first example by using an explicit set of specific parameters, and
write out a \s-1SD\s0 file, type
.PP
.Vb 4
\&    % Psi4GenerateConformers.py \-\-confParams "confMethod,ETKDG,
\&      forceField,MMFF, forceFieldMMFFVariant,MMFF94s, maxConfs,20,
\&      embedRMSDCutoff,0.25" \-\-energyUnits "kJ/mol" \-m B3LYP
\&      \-b "6\-31+G**" \-\-maxIters 20 \-i Psi4Sample.smi \-o Psi4SampleOut.sdf
.Ve
.PP
To run the first example for molecules in a \s-1CSV SMILES\s0 file, \s-1SMILES\s0 strings
in column 1, name column 2, and write out a \s-1SD\s0 file, type:
.PP
.Vb 3
\&    % Psi4GenerateConformers.py \-\-infileParams "smilesDelimiter,comma,
\&      smilesTitleLine,yes,smilesColumn,1,smilesNameColumn,2"
\&      \-i Psi4Sample.csv \-o Psi4SampleOut.sdf
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Manish Sud(msud@san.rr.com)
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Psi4CalculateEnergy.py, Psi4CalculatePartialCharges.py, Psi4PerformMinimization.py
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2022 Manish Sud. All rights reserved.
.PP
The functionality available in this script is implemented using Psi4, an
open source quantum chemistry software package, and RDKit, an open
source toolkit for cheminformatics developed by Greg Landrum.
.PP
This file is part of MayaChemTools.
.PP
MayaChemTools is free software; you can redistribute it and/or modify it under
the terms of the \s-1GNU\s0 Lesser General Public License as published by the Free
Software Foundation; either version 3 of the License, or (at your option) any
later version.
