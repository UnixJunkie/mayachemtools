.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "RDKitFilterTorsionLibraryAlerts 1"
.TH RDKitFilterTorsionLibraryAlerts 1 "2022-09-25" "perl v5.22.4" "MayaChemTools"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
RDKitFilterTorsionLibraryAlerts.py \- Filter torsion library alerts
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
RDKitFilterTorsionLibraryAlerts.py  [\fB\-\-alertsMode\fR <Red, RedAndOrange>] [\fB\-\-alertsMinCount\fR <Number>]
[\fB\-\-infileParams\fR <Name,Value,...>] [\fB\-\-mode\fR <filter or count>] [\fB\-\-mp\fR <yes or no>] [\fB\-\-mpParams\fR <Name,Value,...>]
[\fB\-\-nitrogenLonePairParams\fR <Name,Value,...>] [\fB\-\-outfileAlerts\fR <yes or no>]
[\fB\-\-outfileAlertsMode\fR <All or AlertsOnly>] [\fB\-\-outfileFiltered\fR <yes or no>]
[\fB\-\-outfilesFilteredByRules\fR <yes or no>] [\fB\-\-outfilesFilteredByRulesMaxCount\fR <All or number>]
[\fB\-\-outfileSummary\fR <yes or no>] [\fB\-\-outfileSDFieldLabels\fR <Type,Label,...>]
[\fB\-\-outfileParams\fR <Name,Value,...>] [\fB\-\-overwrite\fR] [ \fB\-\-rotBondsSMARTSMode\fR <NonStrict, SemiStrict,...>]
[\fB\-\-rotBondsSMARTSPattern\fR <\s-1SMARTS\s0>] [\fB\-\-torsionLibraryFile\fR <FileName or auto>] [\fB\-w\fR <dir>] \fB\-i\fR <infile> \fB\-o\fR <outfile>
.PP
RDKitFilterTorsionLibraryAlerts.py [\fB\-\-torsionLibraryFile\fR <FileName or auto>] \fB\-l\fR | \fB\-\-list\fR
.PP
RDKitFilterTorsionLibraryAlerts.py \fB\-h\fR | \fB\-\-help\fR | \fB\-e\fR | \fB\-\-examples\fR
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Filter strained molecules from an input file for torsion library [ Ref 146, 152, 159 ]
alerts by matching rotatable bonds against \s-1SMARTS\s0 patterns specified for torsion
rules in a torsion library file and write out appropriate molecules to output
files. The molecules must have 3D coordinates in input file. The default torsion
library file, TorsionLibrary.xml, is available under MAYACHEMTOOLS/lib/data
directory.
.PP
The data in torsion library file is organized in a hierarchical manner. It consists
of one generic class and six specific classes at the highest level. Each class
contains multiple subclasses corresponding to named functional groups or
substructure patterns. The subclasses consist of torsion rules sorted from
specific to generic torsion patterns. The torsion rule, in turn, contains a list
of peak values for torsion angles and two tolerance values. A pair of tolerance
values define torsion bins around a torsion peak value. For example:
.PP
.Vb 10
\&    <library>
\&        <hierarchyClass name="GG" id1="G" id2="G">
\&        ...
\&        </hierarchyClass>
\&        <hierarchyClass name="CO" id1="C" id2="O">
\&            <hierarchySubClass name="Ester bond I" smarts="O=[C:2][O:3]">
\&                <torsionRule smarts="[O:1]=[C:2]!@[O:3]~[CH0:4]">
\&                    <angleList>
\&                        <angle value="0.0" tolerance1="20.00"
\&                         tolerance2="25.00" score="56.52"/>
\&                    </angleList>
\&                </torsionRule>
\&                ...
\&            ...
\&         ...
\&        </hierarchyClass>
\&        <hierarchyClass name="NC" id1="N" id2="C">
\&         ...
\&        </hierarchyClass>
\&        <hierarchyClass name="SN" id1="S" id2="N">
\&        ...
\&        </hierarchyClass>
\&        <hierarchyClass name="CS" id1="C" id2="S">
\&        ...
\&        </hierarchyClass>
\&        <hierarchyClass name="CC" id1="C" id2="C">
\&        ...
\&        </hierarchyClass>
\&        <hierarchyClass name="SS" id1="S" id2="S">
\&         ...
\&        </hierarchyClass>
\&    </library>
.Ve
.PP
The rotatable bonds in a 3D molecule are identified using a default \s-1SMARTS\s0 pattern.
A custom \s-1SMARTS\s0 pattern may be optionally specified to detect rotatable bonds.
Each rotatable bond is matched to a torsion rule in the torsion library and
assigned one of the following three alert categories: Green, Orange or Red. The 
rotatable bond is marked Green or Orange for the measured angle of the torsion
pattern within the first or second tolerance bins around a torsion peak.
Otherwise, it's marked Red implying that the measured angle is not observed in
the structure databases employed to generate the torsion library.
.PP
The following output files are generated after the filtering:
.PP
.Vb 4
\&    <OutfileRoot>.sdf
\&    <OutfileRoot>_Filtered.sdf
\&    <OutfileRoot>_AlertsSummary.csv
\&    <OutfileRoot>_Filtered_TopRule*.sdf
.Ve
.PP
The supported input file formats are: Mol (.mol), \s-1SD \s0(.sdf, .sd)
.PP
The supported output file formats are: \s-1SD \s0(.sdf, .sd)
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\fB\-a, \-\-alertsMode\fR <Red, RedAndOrange>  [default: Red]" 4
.IX Item "-a, --alertsMode <Red, RedAndOrange> [default: Red]"
Torsion library alert types to use for filtering molecules containing
rotatable bonds marked with Green, Orange, or Red alerts. Possible
values: Red or RedAndOrange.
.IP "\fB\-\-alertsMinCount\fR <Number>  [default: 1]" 4
.IX Item "--alertsMinCount <Number> [default: 1]"
Minimum number of rotatable bond alerts in a molecule for filtering the
molecule.
.IP "\fB\-e, \-\-examples\fR" 4
.IX Item "-e, --examples"
Print examples.
.IP "\fB\-h, \-\-help\fR" 4
.IX Item "-h, --help"
Print this help message.
.IP "\fB\-i, \-\-infile\fR <infile>" 4
.IX Item "-i, --infile <infile>"
Input file name.
.IP "\fB\-\-infileParams\fR <Name,Value,...>  [default: auto]" 4
.IX Item "--infileParams <Name,Value,...> [default: auto]"
A comma delimited list of parameter name and value pairs for reading
molecules from files. The supported parameter names for different file
formats, along with their default values, are shown below:
.Sp
.Vb 1
\&    SD, MOL: removeHydrogens,no,sanitize,yes,strictParsing,yes
.Ve
.IP "\fB\-l, \-\-list\fR" 4
.IX Item "-l, --list"
List torsion library information without performing any filtering.
.IP "\fB\-m, \-\-mode\fR <filter or count>  [default: filter]" 4
.IX Item "-m, --mode <filter or count> [default: filter]"
Specify whether to filter molecules for torsion library [ Ref 146, 152, 159 ] alerts
by matching rotatable bonds against \s-1SMARTS\s0 patterns specified for torsion
rules and write out the rest of the molecules to an outfile or simply count
the number of matched molecules marked for filtering.
.IP "\fB\-\-mp\fR <yes or no>  [default: no]" 4
.IX Item "--mp <yes or no> [default: no]"
Use multiprocessing.
.Sp
By default, input data is retrieved in a lazy manner via mp.Pool.\fIimap()\fR
function employing lazy RDKit data iterable. This allows processing of
arbitrary large data sets without any additional requirements memory.
.Sp
All input data may be optionally loaded into memory by mp.Pool.\fImap()\fR
before starting worker processes in a process pool by setting the value
of 'inputDataMode' to 'InMemory' in '\-\-mpParams' option.
.Sp
A word to the wise: The default 'chunkSize' value of 1 during 'Lazy' input
data mode may adversely impact the performance. The '\-\-mpParams' section
provides additional information to tune the value of 'chunkSize'.
.IP "\fB\-\-mpParams\fR <Name,Value,...>  [default: auto]" 4
.IX Item "--mpParams <Name,Value,...> [default: auto]"
A comma delimited list of parameter name and value pairs to configure
multiprocessing.
.Sp
The supported parameter names along with their default and possible
values are shown below:
.Sp
.Vb 3
\&    chunkSize, auto
\&    inputDataMode, Lazy   [ Possible values: InMemory or Lazy ]
\&    numProcesses, auto   [ Default: mp.cpu_count() ]
.Ve
.Sp
These parameters are used by the following functions to configure and
control the behavior of multiprocessing: mp.\fIPool()\fR, mp.Pool.\fImap()\fR, and
mp.Pool.\fIimap()\fR.
.Sp
The chunkSize determines chunks of input data passed to each worker
process in a process pool by mp.Pool.\fImap()\fR and mp.Pool.\fIimap()\fR functions.
The default value of chunkSize is dependent on the value of 'inputDataMode'.
.Sp
The mp.Pool.\fImap()\fR function, invoked during 'InMemory' input data mode,
automatically converts RDKit data iterable into a list, loads all data into
memory, and calculates the default chunkSize using the following method
as shown in its code:
.Sp
.Vb 2
\&    chunkSize, extra = divmod(len(dataIterable), len(numProcesses) * 4)
\&    if extra: chunkSize += 1
.Ve
.Sp
For example, the default chunkSize will be 7 for a pool of 4 worker processes
and 100 data items.
.Sp
The mp.Pool.\fIimap()\fR function, invoked during 'Lazy' input data mode, employs
\&'lazy' RDKit data iterable to retrieve data as needed, without loading all the
data into memory. Consequently, the size of input data is not known a priori.
It's not possible to estimate an optimal value for the chunkSize. The default 
chunkSize is set to 1.
.Sp
The default value for the chunkSize during 'Lazy' data mode may adversely
impact the performance due to the overhead associated with exchanging
small chunks of data. It is generally a good idea to explicitly set chunkSize to
a larger value during 'Lazy' input data mode, based on the size of your input
data and number of processes in the process pool.
.Sp
The mp.Pool.\fImap()\fR function waits for all worker processes to process all
the data and return the results. The mp.Pool.\fIimap()\fR function, however,
returns the the results obtained from worker processes as soon as the
results become available for specified chunks of data.
.Sp
The order of data in the results returned by both mp.Pool.\fImap()\fR and 
mp.Pool.\fIimap()\fR functions always corresponds to the input data.
.IP "\fB\-n, \-\-nitrogenLonePairParams\fR <Name,Value,...>  [default: auto]" 4
.IX Item "-n, --nitrogenLonePairParams <Name,Value,...> [default: auto]"
A comma delimited list of parameter name and value pairs to match
torsion \s-1SMARTS\s0 patterns containing non-standard construct 'N_lp'
corresponding to nitrogen lone pair.
.Sp
The supported parameter names along with their default and possible
values are shown below:
.Sp
.Vb 2
\&    allowHydrogenNbrs, yes   [ Possible values: yes or no ]
\&    planarityTolerance, 1  [Possible values: >=0]
.Ve
.Sp
These parameters are used during the matching of torsion rules containing
\&'N_lp' in their \s-1SMARTS\s0 patterns. The 'allowHydrogensNbrs' allows the use
hydrogen neighbors attached to nitrogen during the determination of its
planarity. The 'planarityTolerance' in degrees represents the tolerance
allowed for nitrogen to be considered coplanar with its three neighbors.
.Sp
The torsion rules containing 'N_lp' in their \s-1SMARTS\s0 patterns are categorized
into the following two types of rules:
.Sp
.Vb 1
\&    TypeOne:  
\&    
\&    [CX4:1][CX4H2:2]!@[NX3;"N_lp":3][CX4:4]
\&    [C:1][CX4H2:2]!@[NX3;"N_lp":3][C:4]
\&    ... ... ...
\& 
\&    TypeTwo:  
\&    
\&    [!#1:1][CX4:2]!@[NX3;"N_lp":3]
\&    [C:1][$(S(=O)=O):2]!@["N_lp":3]
\&    ... ... ...
.Ve
.Sp
The torsions are matched to torsion rules containing 'N_lp' using specified
\&\s-1SMARTS\s0 patterns without the 'N_lp' along with additional constraints using
the following methodology:
.Sp
.Vb 1
\&    TypeOne:  
\&    
\&    . SMARTS pattern must contain four mapped atoms and the third
\&        mapped atom must be a nitrogen matched with \*(AqNX3:3\*(Aq
\&    . Nitrogen atom must have 3 neighbors. The \*(AqallowHydrogens\*(Aq
\&        parameter controls inclusion of hydrogens as its neighbors.
\&    . Nitrogen atom and its 3 neighbors must be coplanar.
\&        \*(AqplanarityTolerance\*(Aq parameter provides tolerance in degrees
\&        for nitrogen to be considered coplanar with its 3 neighbors.
\&    
\&    TypeTwo:  
\&    
\&    . SMARTS pattern must contain three mapped atoms and the third
\&        mapped atom must be a nitrogen matched with \*(AqNX3:3\*(Aq. The 
\&        third mapped atom may contain only \*(AqN_lp:3\*(Aq The missing \*(AqNX3\*(Aq
\&        is automatically detected.
\&    . Nitrogen atom must have 3 neighbors. \*(AqallowHydrogens\*(Aq
\&        parameter controls inclusion of hydrogens as neighbors.
\&    . Nitrogen atom and its 3 neighbors must not be coplanar.
\&        \*(AqplanarityTolerance\*(Aq parameter provides tolerance in degrees
\&        for nitrogen to be considered coplanar with its 3 neighbors.
\&    . Nitrogen lone pair position equivalent to VSEPR theory is
\&        determined based on the position of nitrogen and its neighbors.
\&        A vector normal to 3 nitrogen neighbors is calculated and added
\&        to the coordinates of nitrogen atom to determine the approximate
\&        position of the lone pair. It is used as the fourth position to
\&        calculate the torsion angle.
.Ve
.IP "\fB\-o, \-\-outfile\fR <outfile>" 4
.IX Item "-o, --outfile <outfile>"
Output file name.
.IP "\fB\-\-outfileAlerts\fR <yes or no>  [default: yes]" 4
.IX Item "--outfileAlerts <yes or no> [default: yes]"
Write out alerts information to \s-1SD\s0 output files.
.IP "\fB\-\-outfileAlertsMode\fR <All or AlertsOnly>  [default: AlertsOnly]" 4
.IX Item "--outfileAlertsMode <All or AlertsOnly> [default: AlertsOnly]"
Write alerts information to \s-1SD\s0 output files for all alerts or only for alerts
specified by '\-\-AlertsMode' option. Possible values: All or AlertsOnly
This option is only valid for 'Yes' value of '\-\-outfileAlerts' option.
.Sp
The following alerts information is added to \s-1SD\s0 output files using
\&'TorsionAlerts' data field:
.Sp
.Vb 3
\&    RotBondIndices TorsionAlert TorsionIndices TorsionAngle
\&    TorsionAngleViolation HierarchyClass HierarchySubClass
\&    TorsionRule TorsionPeaks Tolerances1 Tolerances2
.Ve
.Sp
The 'RotBondsCount' and 'TorsionAlertsCount' data fields are always added
to \s-1SD\s0 output files containing both remaining and filtered molecules.
.Sp
Format:
.Sp
.Vb 2
\&    > <RotBondsCount>
\&    Number
\&    
\&    > <TorsionAlertsCount (Green Orange Red)>
\&    Number Number Number
\&    
\&    > <TorsionAlerts (RotBondIndices TorsionAlert TorsionIndices
\&        TorsionAngle TorsionAngleViolation HierarchyClass
\&        HierarchySubClass TorsionPeaks Tolerances1 Tolerances2
\&        TorsionRule)>
\&    AtomIndex2,AtomIndex3  AlertType AtomIndex1,AtomIndex2,AtomIndex3,
\&    AtomIndex4 Angle AngleViolation ClassName SubClassName
\&    CommaDelimPeakValues CommaDelimTol1Values CommDelimTol2Values
\&    SMARTS ... ... ...
\&     ... ... ...
.Ve
.Sp
A set of 11 values is written out as value of 'TorsionAlerts' data field for
each torsion in a molecule. The space character is used as a delimiter
to separate values with in a set and across set. The comma character
is used to delimit multiple values for each value in a set.
.Sp
The 'RotBondIndices' and 'TorsionIndices' contain 2 and 4 comma delimited
values representing atom indices for a rotatable bond and matched torsion.
The 'TorsionPeaks',  'Tolerances1', and 'Tolerances2' contain same number
of comma delimited values corresponding to  torsion angle peaks and
tolerance intervals specified in torsion library. For example:
.Sp
.Vb 3
\&    ... ... ...
\&    >  <RotBondsCount>  (1) 
\&    7
\&    
\&    >  <TorsionAlertsCount (Green Orange Red)>  (1) 
\&    3 2 2
\&    
\&    >  <TorsionAlerts (RotBondIndices TorsionAlert TorsionIndices
\&        TorsionAngle TorsionAngleViolation HierarchyClass
\&        HierarchySubClass TorsionPeaks Tolerances1 Tolerances2
\&        TorsionRule)>
\&    1,2 Red 32,2,1,0 0.13 149.87 NC Anilines 180.0 10.0 30.0 [cH0:1][c:2]
\&    ([cH,nX2H0])!@[NX3H1:3][CX4:4] 8,9 Red 10,9,8,28 \-0.85 GG
\&    None \-90.0,90.0 30.0,30.0 60.0,60.0 [cH1:1][a:2]([cH1])!@[a:3]
\&    ([cH0])[cH0:4]
\&    ... ... ...
.Ve
.IP "\fB\-\-outfileFiltered\fR <yes or no>  [default: yes]" 4
.IX Item "--outfileFiltered <yes or no> [default: yes]"
Write out a file containing filtered molecules. Its name is automatically
generated from the specified output file. Default: <OutfileRoot>_
Filtered.<OutfileExt>.
.IP "\fB\-\-outfilesFilteredByRules\fR <yes or no>  [default: yes]" 4
.IX Item "--outfilesFilteredByRules <yes or no> [default: yes]"
Write out \s-1SD\s0 files containing filtered molecules for individual torsion
rules triggering alerts in molecules. The name of \s-1SD\s0 files are automatically
generated from the specified output file. Default file names: <OutfileRoot>_
Filtered_TopRule*.sdf
.Sp
The following alerts information is added to \s-1SD\s0 output files:
.Sp
.Vb 2
\&    > <RotBondsCount>
\&    Number
\&    
\&    >  <TorsionAlertsCount (Green Orange Red)> 
\&    Number Number Number
\&    
\&    >  <TorsionRule (HierarchyClass HierarchySubClass TorsionPeaks
\&        Tolerances1 Tolerances2 TorsionRule)> 
\&    ClassName SubClassName CommaDelimPeakValues CommaDelimTol1Values
\&    CommDelimTol2Values SMARTS ... ... ...
\&     ... ... ...
\&    
\&    > <TorsionRuleAlertsCount (Green Orange Red)>
\&    Number Number Number
\&    
\&    >  <TorsionRuleAlerts (RotBondIndices TorsionAlert TorsionIndices
\&        TorsionAngle TorsionAngleViolation)>
\&    AtomIndex2,AtomIndex3  AlertType AtomIndex1,AtomIndex2,AtomIndex3,
\&    AtomIndex4 Angle AngleViolation ... ... ...
\&    
\&    >  <TorsionRuleMaxAngleViolation>
\&    Number
\&     ... ... ...
.Ve
.Sp
For example:
.Sp
.Vb 3
\&    ... ... ...
\&    >  <RotBondsCount>  (1) 
\&    7
\&     
\&    >  <TorsionAlertsCount (Green Orange Red)>  (1) 
\&    3 2 2
\&    
\&    >  <TorsionRule (HierarchyClass HierarchySubClass TorsionPeaks
\&        Tolerances1 Tolerances2 TorsionRule)>  (1) 
\&    NC Anilines 180.0 10.0 30.0 [cH0:1][c:2]([cH,nX2H0])!@[NX3H1:3][CX4:4]
\&    
\&    >  <TorsionRuleAlertsCount (Green Orange Red)>  (1) 
\&    0 0 1
\&    
\&    >  <TorsionRuleAlerts (RotBondIndices TorsionAlert TorsionIndices
\&        TorsionAngle TorsionAngleViolation)>  (1) 
\&    1,2 Red 32,2,1,0 0.13 149.87
\&    
\&    >  <TorsionRuleMaxAngleViolation>  (1) 
\&    149.87
\&    ... ... ...
.Ve
.IP "\fB\-\-outfilesFilteredByRulesMaxCount\fR <All or number>  [default: 10]" 4
.IX Item "--outfilesFilteredByRulesMaxCount <All or number> [default: 10]"
Write out \s-1SD\s0 files containing filtered molecules for specified number of
top N torsion rules triggering alerts for the largest number of molecules
or for all torsion rules triggering alerts across all molecules.
.IP "\fB\-\-outfileSummary\fR <yes or no>  [default: yes]" 4
.IX Item "--outfileSummary <yes or no> [default: yes]"
Write out a \s-1CVS\s0 text file containing summary of torsions rules responsible
for triggering torsion alerts. Its name is automatically generated from the
specified output file. Default: <OutfileRoot>_AlertsSummary.csv.
.Sp
The following alerts information is written to summary text file:
.Sp
.Vb 3
\&    TorsionRule, TorsionPeaks, Tolerances1, Tolerances2,
\&    HierarchyClass, HierarchySubClass, TorsionAlertType,
\&    TorsionAlertCount, TorsionAlertMolCount
.Ve
.Sp
The double quotes characters are removed from \s-1SMART\s0 patterns before
before writing them to a \s-1CSV\s0 file. In addition, the torsion rules are sorted by
TorsionAlertMolCount. For example:
.Sp
.Vb 7
\&    "TorsionRule","TorsionPeaks","Tolerances1","Tolerances2",
\&        "HierarchyClass","HierarchySubClass","TorsionAlertTypes",
\&        "TorsionAlertCount","TorsionAlertMolCount"
\&    "[!#1:1][CX4H2:2]!@[CX4H2:3][!#1:4]","\-60.0,60.0,180.0",
\&        "20.0,20.0,20.0","30.0,30.0,30.0","CC","None/[CX4:2][CX4:3]",
\&        "Red","16","11"
\&    ... ... ...
.Ve
.IP "\fB\-\-outfileSDFieldLabels\fR <Type,Label,...>  [default: auto]" 4
.IX Item "--outfileSDFieldLabels <Type,Label,...> [default: auto]"
A comma delimited list of \s-1SD\s0 data field type and label value pairs for writing
torsion alerts information along with molecules to \s-1SD\s0 files.
.Sp
The supported \s-1SD\s0 data field label type along with their default values are
shown below:
.Sp
.Vb 1
\&    For all SD files:
\&    
\&    RotBondsCountLabel, RotBondsCount
\&    TorsionAlertsCountLabel, TorsionAlertsCount (Green Orange Red)
\&    TorsionAlertsLabel, TorsionAlerts (RotBondIndices TorsionAlert
\&        TorsionIndices TorsionAngle TorsionAngleViolation
\&        HierarchyClass HierarchySubClass TorsionPeaks Tolerances1
\&        Tolerances2 TorsionRule)
\&    
\&    For individual SD files filtered by torsion rules:
\&    
\&    TorsionRuleLabel, TorsionRule (HierarchyClass HierarchySubClass
\&        TorsionPeaks Tolerances1 Tolerances2 TorsionRule)
\&    TorsionRuleAlertsCountLabel, TorsionRuleAlertsCount (Green Orange
\&        Red)
\&    TorsionRuleAlertsLabel, TorsionRuleAlerts (RotBondIndices
\&        TorsionAlert TorsionIndices TorsionAngle TorsionAngleViolation)
\&    TorsionRuleMaxAngleViolationLabel, TorsionRuleMaxAngleViolation
.Ve
.IP "\fB\-\-outfileParams\fR <Name,Value,...>  [default: auto]" 4
.IX Item "--outfileParams <Name,Value,...> [default: auto]"
A comma delimited list of parameter name and value pairs for writing
molecules to files. The supported parameter names for different file
formats, along with their default values, are shown below:
.Sp
.Vb 1
\&    SD: kekulize,yes
.Ve
.IP "\fB\-\-overwrite\fR" 4
.IX Item "--overwrite"
Overwrite existing files.
.IP "\fB\-r, \-\-rotBondsSMARTSMode\fR <NonStrict, SemiStrict,...>  [default: SemiStrict]" 4
.IX Item "-r, --rotBondsSMARTSMode <NonStrict, SemiStrict,...> [default: SemiStrict]"
\&\s-1SMARTS\s0 pattern to use for identifying rotatable bonds in a molecule
for matching against torsion rules in the torsion library. Possible values:
NonStrict, SemiStrict, Strict or Specify. The rotatable bond \s-1SMARTS\s0 matches
are filtered to ensure that each atom in the rotatable bond is attached to
at least two heavy atoms.
.Sp
The following \s-1SMARTS\s0 patterns are used to identify rotatable bonds for
different modes:
.Sp
.Vb 1
\&    NonStrict: [!$(*#*)&!D1]\-&!@[!$(*#*)&!D1]
\&    
\&    SemiStrict:
\&    [!$(*#*)&!D1&!$(C(F)(F)F)&!$(C(Cl)(Cl)Cl)&!$(C(Br)(Br)Br)
\&    &!$(C([CH3])([CH3])[CH3])]\-!@[!$(*#*)&!D1&!$(C(F)(F)F)
\&    &!$(C(Cl)(Cl)Cl)&!$(C(Br)(Br)Br)&!$(C([CH3])([CH3])[CH3])]
\&    
\&    Strict:
\&    [!$(*#*)&!D1&!$(C(F)(F)F)&!$(C(Cl)(Cl)Cl)&!$(C(Br)(Br)Br)
\&    &!$(C([CH3])([CH3])[CH3])&!$([CD3](=[N,O,S])\-!@[#7,O,S!D1])
\&    &!$([#7,O,S!D1]\-!@[CD3]=[N,O,S])&!$([CD3](=[N+])\-!@[#7!D1])
\&    &!$([#7!D1]\-!@[CD3]=[N+])]\-!@[!$(*#*)&!D1&!$(C(F)(F)F)
\&    &!$(C(Cl)(Cl)Cl)&!$(C(Br)(Br)Br)&!$(C([CH3])([CH3])[CH3])]
.Ve
.Sp
The 'NonStrict' and 'Strict' \s-1SMARTS\s0 patterns are available in RDKit. The 
\&'NonStrict' \s-1SMARTS\s0 pattern corresponds to original Daylight \s-1SMARTS
\&\s0 specification for rotatable bonds. The 'SemiStrict' \s-1SMARTS\s0 pattern is 
 derived from 'Strict' \s-1SMARTS\s0 patterns for its usage in this script.
.Sp
You may use any arbitrary \s-1SMARTS\s0 pattern to identify rotatable bonds by
choosing 'Specify' value for '\-r, \-\-rotBondsSMARTSMode' option and providing its
value via '\-\-rotBondsSMARTSPattern' option.
.IP "\fB\-\-rotBondsSMARTSPattern\fR <\s-1SMARTS\s0>" 4
.IX Item "--rotBondsSMARTSPattern <SMARTS>"
\&\s-1SMARTS\s0 pattern for identifying rotatable bonds. This option is only valid
for 'Specify' value of '\-r, \-\-rotBondsSMARTSMode' option.
.IP "\fB\-t, \-\-torsionLibraryFile\fR <FileName or auto>  [default: auto]" 4
.IX Item "-t, --torsionLibraryFile <FileName or auto> [default: auto]"
Specify a \s-1XML\s0 file name containing data for torsion library hierarchy or use
default file, TorsionLibrary.xml, available in MAYACHEMTOOLS/lib/data
directory.
.Sp
The format of data in local \s-1XML\s0 file must match format of the data in Torsion
Library [ Ref 146, 152, 159 ] file available in \s-1MAYACHEMTOOLS\s0 data directory.
.IP "\fB\-w, \-\-workingdir\fR <dir>" 4
.IX Item "-w, --workingdir <dir>"
Location of working directory which defaults to the current directory.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
To filter molecules containing any rotatable bonds marked with Red alerts
based on torsion rules in the torsion library and write out \s-1SD\s0 files containing
remaining and filtered molecules, and individual \s-1SD\s0 files for torsion rules
triggering alerts along with appropriate torsion information for red alerts,
type:
.PP
.Vb 1
\&    % RDKitFilterTorsionLibraryAlerts.py \-i Sample3D.sdf \-o Sample3DOut.sdf
.Ve
.PP
To run the first example for only counting number of alerts without writing
out any \s-1SD\s0 files, type:
.PP
.Vb 2
\&    % RDKitFilterTorsionLibraryAlerts.py \-m count \-i Sample3D.sdf \-o
\&      Sample3DOut.sdf
.Ve
.PP
To run the first example for filtertering molecules marked with Orange or
Red alerts and write out \s-1SD\s0 files, tye:
.PP
.Vb 2
\&    % RDKitFilterTorsionLibraryAlerts.py \-m Filter \-\-alertsMode RedAndOrange
\&      \-i Sample3D.sdf \-o Sample3DOut.sdf
.Ve
.PP
To run the first example for filtering molecules and writing out torsion
information for all alert types to \s-1SD\s0 files, type:
.PP
.Vb 2
\&    % RDKitFilterTorsionLibraryAlerts.py \-\-outfileAlertsMode All
\&      \-i Sample3D.sdf \-o Sample3DOut.sdf
.Ve
.PP
To run the first example for filtering molecules in multiprocessing mode on
all available CPUs without loading all data into memory and write out \s-1SD\s0 files,
type:
.PP
.Vb 2
\&    % RDKitFilterTorsionLibraryAlerts.py \-\-mp yes \-i Sample3D.sdf
\&     \-o Sample3DOut.sdf
.Ve
.PP
To run the first example for filtering molecules in multiprocessing mode on
all available CPUs by loading all data into memory and write out a \s-1SD\s0 files,
type:
.PP
.Vb 2
\&    % RDKitFilterTorsionLibraryAlerts.py  \-\-mp yes \-\-mpParams
\&      "inputDataMode, InMemory" \-i Sample3D.sdf  \-o Sample3DOut.sdf
.Ve
.PP
To run the first example for filtering molecules in multiprocessing mode on
specific number of CPUs and chunksize without loading all data into memory
and write out \s-1SD\s0 files, type:
.PP
.Vb 3
\&    % RDKitFilterTorsionLibraryAlerts.py \-\-mp yes \-\-mpParams
\&      "inputDataMode,lazy,numProcesses,4,chunkSize,8"  \-i Sample3D.sdf
\&      \-o Sample3DOut.sdf
.Ve
.PP
To list information about default torsion library file without performing any
filtering, type:
.PP
.Vb 1
\&    % RDKitFilterTorsionLibraryAlerts.py \-l
.Ve
.PP
To list information about a local torsion library \s-1XML\s0 file without performing
any, filtering, type:
.PP
.Vb 2
\&    % RDKitFilterTorsionLibraryAlerts.py \-\-torsionLibraryFile
\&      TorsionLibrary.xml \-l
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Manish Sud (msud@san.rr.com)
.SH "COLLABORATOR"
.IX Header "COLLABORATOR"
Pat Walters
.SH "ACKNOWLEDGMENTS"
.IX Header "ACKNOWLEDGMENTS"
Wolfgang Guba, Patrick Penner, Levi Pierce
.SH "SEE ALSO"
.IX Header "SEE ALSO"
RDKitFilterChEMBLAlerts.py, RDKitFilterPAINS.py, RDKitFilterTorsionStrainEnergyAlerts.py,
RDKitConvertFileFormat.py, RDKitSearchSMARTS.py
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2022 Manish Sud. All rights reserved.
.PP
This script uses the Torsion Library jointly developed by the University
of Hamburg, Center for Bioinformatics, Hamburg, Germany and
F. Hoffmann-La-Roche Ltd., Basel, Switzerland.
.PP
The functionality available in this script is implemented using RDKit, an
open source toolkit for cheminformatics developed by Greg Landrum.
.PP
This file is part of MayaChemTools.
.PP
MayaChemTools is free software; you can redistribute it and/or modify it under
the terms of the \s-1GNU\s0 Lesser General Public License as published by the Free
Software Foundation; either version 3 of the License, or (at your option) any
later version.
