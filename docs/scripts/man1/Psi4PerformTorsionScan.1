.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Psi4PerformTorsionScan 1"
.TH Psi4PerformTorsionScan 1 "2022-09-25" "perl v5.22.4" "MayaChemTools"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Psi4PerformTorsionScan.py \- Perform torsion scan
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Psi4PerformTorsionScan.py [\fB\-\-basisSet\fR <text>] [\fB\-\-confParams\fR <Name,Value,...>] [\fB\-\-energyDataFieldLabel\fR <text>]
[\fB\-\-energyRelativeDataFieldLabel\fR <text>] [\fB\-\-energyUnits\fR <text>] [\fB\-\-infile3D\fR <yes or no>]
[\fB\-\-infileParams\fR <Name,Value,...>] [\fB\-\-maxIters\fR <number>] [\fB\-\-methodName\fR <text>]
[\fB\-\-modeMols\fR <First or All>] [\fB\-\-modeTorsions\fR <First or All>] [\fB\-\-mp\fR <yes or no>]
[\fB\-\-mpLevel\fR <Molecules or TorsionAngles>] [\fB\-\-mpParams\fR <Name,Value,...>]
[\fB\-\-outfileMolName\fR <yes or no>] [\fB\-\-outfileParams\fR <Name,Value,...>] [\fB\-\-outPlotParams\fR <Name,Value,...>]
[\fB\-\-outPlotRelativeEnergy\fR <yes or no>] [\fB\-\-outPlotTitleTorsionSpec\fR <yes or no>] [\fB\-\-overwrite\fR]
[\fB\-\-precision\fR <number>] [\fB\-\-psi4OptionsParams\fR <Name,Value,...>] [\fB\-\-psi4RunParams\fR <Name,Value,...>]
[\fB\-\-quiet\fR <yes or no>] [\fB\-\-reference\fR <text>]  [\fB\-\-torsionsFilterbyAtomIndices\fR <Index1, Index2, ...>]
[\fB\-\-torsionMaxMatches\fR <number>] [\fB\-\-torsionMinimize\fR <yes or no>] [\fB\-\-torsionRange\fR <Start,Stop,Step>]
[\fB\-\-useChirality\fR <yes or no>] [\fB\-w\fR <dir>] \fB\-t\fR <torsions> \fB\-i\fR <infile>  \fB\-o\fR <outfile>
.PP
Psi4PerformTorsionScan.py \fB\-h\fR | \fB\-\-help\fR | \fB\-e\fR | \fB\-\-examples\fR
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Perform torsion scan for molecules around torsion angles specified using
\&\s-1SMILES/SMARTS\s0 patterns. A molecule is optionally minimized before performing
a torsion scan using a forcefield. A set of initial 3D structures are generated for
a molecule by scanning the torsion angle across the specified range and updating
the 3D coordinates of the molecule. A conformation ensemble is optionally generated
for each 3D structure representing a specific torsion angle using a combination of
distance geometry and forcefield followed by constrained geometry optimization
using a quantum chemistry method. The conformation with the lowest energy is
selected to represent the torsion angle. An option is available to skip the generation
of the conformation ensemble and simply calculate the energy for the initial 3D
structure for a specific torsion torsion angle using a quantum chemistry method.
.PP
The torsions are specified using \s-1SMILES\s0 or \s-1SMARTS\s0 patterns. A substructure match
is performed to select torsion atoms in a molecule. The \s-1SMILES\s0 pattern match must
correspond to four torsion atoms. The \s-1SMARTS\s0 patterns containing atom map numbers
may match  more than four atoms. The atom map numbers, however, must match
exactly four torsion atoms. For example: [s:1][c:2]([aX2,cH1])!@[\s-1CX3:3\s0](O)=[O:4] for
thiophene esters and carboxylates as specified in Torsion Library (TorLib) [Ref 146].
.PP
A Psi4 \s-1XYZ\s0 format geometry string is automatically generated for each molecule
in input file. It contains atom symbols and 3D coordinates for each atom in a
molecule. In addition, the formal charge and spin multiplicity are present in the
the geometry string. These values are either retrieved from molecule properties
named 'FormalCharge' and 'SpinMultiplicty' or dynamically calculated for a
molecule.
.PP
A set of four output files is generated for each torsion match in each
molecule. The names of the output files are generated using the root of
the specified output file. They may either contain sequential molecule
numbers or molecule names as shown below:
.PP
.Vb 4
\&    <OutfileRoot>_Mol<Num>.sdf
\&    <OutfileRoot>_Mol<Num>_Torsion<Num>_Match<Num>.sdf
\&    <OutfileRoot>_Mol<Num>_Torsion<Num>_Match<Num>_Energies.csv
\&    <OutfileRoot>_Mol<Num>_Torsion<Num>_Match<Num>_Plot.<ImgExt>
\&    
\&    or
\&    
\&    <OutfileRoot>_<MolName>.sdf
\&    <OutfileRoot>_<MolName>_Torsion<Num>_Match<Num>.sdf
\&    <OutfileRoot>_<MolName>_Torsion<Num>_Match<Num>_Energies.csv
\&    <OutfileRoot>_<MolName>_Torsion<Num>_Match<Num>_Plot.<ImgExt>
.Ve
.PP
The supported input file formats are: Mol (.mol), \s-1SD \s0(.sdf, .sd), \s-1SMILES \s0(.smi,
\&.csv, .tsv, .txt)
.PP
The supported output file formats are: \s-1SD \s0(.sdf, .sd)
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\fB\-b, \-\-basisSet\fR <text>  [default: auto]" 4
.IX Item "-b, --basisSet <text> [default: auto]"
Basis set to use for energy calculation or constrained energy minimization.
Default: 6\-31+G** for sulfur containing molecules; Otherwise, 6\-31G** [ Ref 150 ].
The specified value must be a valid Psi4 basis set. No validation is performed.
.Sp
The following list shows a representative sample of basis sets available
in Psi4:
.Sp
.Vb 5
\&    STO\-3G, 6\-31G, 6\-31+G, 6\-31++G, 6\-31G*, 6\-31+G*,  6\-31++G*, 
\&    6\-31G**, 6\-31+G**, 6\-31++G**, 6\-311G, 6\-311+G, 6\-311++G,
\&    6\-311G*, 6\-311+G*, 6\-311++G*, 6\-311G**, 6\-311+G**, 6\-311++G**,
\&    cc\-pVDZ, cc\-pCVDZ, aug\-cc\-pVDZ, cc\-pVDZ\-DK, cc\-pCVDZ\-DK, def2\-SVP,
\&    def2\-SVPD, def2\-TZVP, def2\-TZVPD, def2\-TZVPP, def2\-TZVPPD
.Ve
.IP "\fB\-\-confParams\fR <Name,Value,...>  [default: auto]" 4
.IX Item "--confParams <Name,Value,...> [default: auto]"
A comma delimited list of parameter name and value pairs for generating
initial 3D coordinates for molecules in input file at specific torsion angles. A
conformation ensemble is optionally generated for each 3D structure
representing a specific torsion angle using a combination of distance geometry
and forcefield followed by constrained geometry optimization using a quantum
chemistry method. The conformation with the lowest energy is selected to
represent the torsion angle.
.Sp
The supported parameter names along with their default values are shown
below:
.Sp
.Vb 4
\&    confMethod,ETKDG,
\&    forceField,MMFF, forceFieldMMFFVariant,MMFF94,
\&    enforceChirality,yes,embedRMSDCutoff,0.5,maxConfs,250,
\&    maxConfsTorsions,50,useTethers,yes
\&    
\&    confMethod,ETKDG   [ Possible values: SDG, ETDG, KDG, ETKDG ]
\&    forceField, MMFF   [ Possible values: UFF or MMFF ]
\&    forceFieldMMFFVariant,MMFF94   [ Possible values: MMFF94 or MMFF94s ]
\&    enforceChirality,yes   [ Possible values: yes or no ]
\&    useTethers,yes   [ Possible values: yes or no ]
.Ve
.Sp
confMethod: Conformation generation methodology for generating initial 3D
coordinates. Possible values: Standard Distance Geometry (\s-1SDG\s0), Experimental
Torsion-angle preference with Distance Geometry (\s-1ETDG\s0), basic Knowledge-terms
with Distance Geometry (\s-1KDG\s0) and Experimental Torsion-angle preference
along with basic Knowledge-terms with Distance Geometry (\s-1ETKDG\s0) [Ref 129] .
.Sp
forceField: Forcefield method to use for energy minimization. Possible values:
Universal Force Field (\s-1UFF\s0) [ Ref 81 ] or Merck Molecular Mechanics Force
Field [ Ref 83\-87 ] .
.Sp
enforceChirality: Enforce chirality for defined chiral centers during
forcefield minimization.
.Sp
maxConfs: Maximum number of conformations to generate for each molecule
during the generation of an initial 3D conformation ensemble using a conformation
generation methodology. The conformations are minimized using the specified
forcefield. The lowest energy structure is selected for performing the torsion scan.
.Sp
maxConfsTorsion: Maximum number of 3D conformations to generate for
conformation ensemble representing a specific torsion. The conformations are
constrained at specific torsions angles and minimized using the specified forcefield
and a quantum chemistry method. The lowest energy conformation is selected to
calculate final torsion energy and written to the output file.
.Sp
embedRMSDCutoff: \s-1RMSD\s0 cutoff for retaining initial set of conformers embedded
using distance geometry and forcefield minimization. All embedded conformers
are kept for 'None' value. Otherwise, only those conformers which are different
from each other by the specified \s-1RMSD\s0 cutoff, 0.5 by default, are kept. The first
embedded conformer is always retained.
.Sp
useTethers: Use tethers to optimize the final embedded conformation by
applying a series of extra forces to align matching atoms to the positions of
the core atoms. Otherwise, use simple distance constraints during the
optimization.
.IP "\fB\-\-energyDataFieldLabel\fR <text>  [default: auto]" 4
.IX Item "--energyDataFieldLabel <text> [default: auto]"
Energy data field label for writing energy values. Default: Psi4_Energy (<Units>).
.IP "\fB\-\-energyRelativeDataFieldLabel\fR <text>  [default: auto]" 4
.IX Item "--energyRelativeDataFieldLabel <text> [default: auto]"
Relative energy data field label for writing energy values. Default:
Psi4_Relative_Energy (<Units>).
.IP "\fB\-\-energyUnits\fR <text>  [default: kcal/mol]" 4
.IX Item "--energyUnits <text> [default: kcal/mol]"
Energy units. Possible values: Hartrees, kcal/mol, kJ/mol, or eV.
.IP "\fB\-e, \-\-examples\fR" 4
.IX Item "-e, --examples"
Print examples.
.IP "\fB\-h, \-\-help\fR" 4
.IX Item "-h, --help"
Print this help message.
.IP "\fB\-i, \-\-infile\fR <infile>" 4
.IX Item "-i, --infile <infile>"
Input file name.
.IP "\fB\-\-infile3D\fR <yes or no>  [default: no]" 4
.IX Item "--infile3D <yes or no> [default: no]"
Skip generation and minimization of initial 3D structures for molecules in
input file containing 3D coordinates.
.IP "\fB\-\-infileParams\fR <Name,Value,...>  [default: auto]" 4
.IX Item "--infileParams <Name,Value,...> [default: auto]"
A comma delimited list of parameter name and value pairs for reading
molecules from files. The supported parameter names for different file
formats, along with their default values, are shown below:
.Sp
.Vb 1
\&    SD, MOL: removeHydrogens,no,sanitize,yes,strictParsing,yes
\&    
\&    SMILES: smilesColumn,1,smilesNameColumn,2,smilesDelimiter,space,
\&        smilesTitleLine,auto,sanitize,yes
.Ve
.Sp
Possible values for smilesDelimiter: space, comma or tab.
.IP "\fB\-\-maxIters\fR <number>  [default: 50]" 4
.IX Item "--maxIters <number> [default: 50]"
Maximum number of iterations to perform for each molecule or conformer
during constrained energy minimization by a quantum chemistry method.
.IP "\fB\-m, \-\-methodName\fR <text>  [default: auto]" 4
.IX Item "-m, --methodName <text> [default: auto]"
Method to use for energy calculation or constrained energy minimization.
Default: B3LYP [ Ref 150 ]. The specified value must be a valid Psi4 method
name. No validation is performed.
.Sp
The following list shows a representative sample of methods available
in Psi4:
.Sp
.Vb 4
\&    B1LYP, B2PLYP, B2PLYP\-D3BJ, B2PLYP\-D3MBJ, B3LYP, B3LYP\-D3BJ,
\&    B3LYP\-D3MBJ, CAM\-B3LYP, CAM\-B3LYP\-D3BJ, HF, HF\-D3BJ,  HF3c, M05,
\&    M06, M06\-2x, M06\-HF, M06\-L, MN12\-L, MN15, MN15\-D3BJ,PBE, PBE0,
\&    PBEH3c, PW6B95, PW6B95\-D3BJ, WB97, WB97X, WB97X\-D, WB97X\-D3BJ
.Ve
.IP "\fB\-\-modeMols\fR <First or All>  [default: First]" 4
.IX Item "--modeMols <First or All> [default: First]"
Perform torsion scan for the first molecule or all molecules in input
file.
.IP "\fB\-\-modeTorsions\fR <First or All>  [default: First]" 4
.IX Item "--modeTorsions <First or All> [default: First]"
Perform torsion scan for the first or all specified torsion pattern in
molecules up to a maximum number of matches for each torsion
specification as indicated by '\-\-torsionMaxMatches' option.
.IP "\fB\-\-mp\fR <yes or no>  [default: no]" 4
.IX Item "--mp <yes or no> [default: no]"
Use multiprocessing.
.Sp
By default, input data is retrieved in a lazy manner via mp.Pool.\fIimap()\fR
function employing lazy RDKit data iterable. This allows processing of
arbitrary large data sets without any additional requirements memory.
.Sp
All input data may be optionally loaded into memory by mp.Pool.\fImap()\fR
before starting worker processes in a process pool by setting the value
of 'inputDataMode' to 'InMemory' in '\-\-mpParams' option.
.Sp
A word to the wise: The default 'chunkSize' value of 1 during 'Lazy' input
data mode may adversely impact the performance. The '\-\-mpParams' section
provides additional information to tune the value of 'chunkSize'.
.IP "\fB\-\-mpLevel\fR <Molecules or TorsionAngles>  [default: Molecules]" 4
.IX Item "--mpLevel <Molecules or TorsionAngles> [default: Molecules]"
Perform multiprocessing at molecules or torsion angles level. Possible values:
Molecules or TorsionAngles. The 'Molecules' value starts a process pool at the
molecules level. All torsion angles of a molecule are processed in a single
process. The 'TorsionAngles' value, however, starts a process pool at the 
torsion angles level. Each torsion angle in a torsion match for a molecule is
processed in an individual process in the process pool.
.IP "\fB\-\-mpParams\fR <Name,Value,...>  [default: auto]" 4
.IX Item "--mpParams <Name,Value,...> [default: auto]"
A comma delimited list of parameter name and value pairs to configure
multiprocessing.
.Sp
The supported parameter names along with their default and possible
values are shown below:
.Sp
.Vb 3
\&    chunkSize, auto
\&    inputDataMode, Lazy   [ Possible values: InMemory or Lazy ]
\&    numProcesses, auto   [ Default: mp.cpu_count() ]
.Ve
.Sp
These parameters are used by the following functions to configure and
control the behavior of multiprocessing: mp.\fIPool()\fR, mp.Pool.\fImap()\fR, and
mp.Pool.\fIimap()\fR.
.Sp
The chunkSize determines chunks of input data passed to each worker
process in a process pool by mp.Pool.\fImap()\fR and mp.Pool.\fIimap()\fR functions.
The default value of chunkSize is dependent on the value of 'inputDataMode'.
.Sp
The mp.Pool.\fImap()\fR function, invoked during 'InMemory' input data mode,
automatically converts RDKit data iterable into a list, loads all data into
memory, and calculates the default chunkSize using the following method
as shown in its code:
.Sp
.Vb 2
\&    chunkSize, extra = divmod(len(dataIterable), len(numProcesses) * 4)
\&    if extra: chunkSize += 1
.Ve
.Sp
For example, the default chunkSize will be 7 for a pool of 4 worker processes
and 100 data items.
.Sp
The mp.Pool.\fIimap()\fR function, invoked during 'Lazy' input data mode, employs
\&'lazy' RDKit data iterable to retrieve data as needed, without loading all the
data into memory. Consequently, the size of input data is not known a priori.
It's not possible to estimate an optimal value for the chunkSize. The default 
chunkSize is set to 1.
.Sp
The default value for the chunkSize during 'Lazy' data mode may adversely
impact the performance due to the overhead associated with exchanging
small chunks of data. It is generally a good idea to explicitly set chunkSize to
a larger value during 'Lazy' input data mode, based on the size of your input
data and number of processes in the process pool.
.Sp
The mp.Pool.\fImap()\fR function waits for all worker processes to process all
the data and return the results. The mp.Pool.\fIimap()\fR function, however,
returns the the results obtained from worker processes as soon as the
results become available for specified chunks of data.
.Sp
The order of data in the results returned by both mp.Pool.\fImap()\fR and 
mp.Pool.\fIimap()\fR functions always corresponds to the input data.
.IP "\fB\-o, \-\-outfile\fR <outfile>" 4
.IX Item "-o, --outfile <outfile>"
Output file name. The output file root is used for generating the names
of the output files corresponding to structures, energies, and plots during
the torsion scan.
.IP "\fB\-\-outfileMolName\fR <yes or no>  [default: no]" 4
.IX Item "--outfileMolName <yes or no> [default: no]"
Append molecule name to output file root during the generation of the names
for output files. The default is to use <MolNum>. The non alphabetical
characters in molecule names are replaced by underscores.
.IP "\fB\-\-outfileParams\fR <Name,Value,...>  [default: auto]" 4
.IX Item "--outfileParams <Name,Value,...> [default: auto]"
A comma delimited list of parameter name and value pairs for writing
molecules to files. The supported parameter names for different file
formats, along with their default values, are shown below:
.Sp
.Vb 1
\&    SD: kekulize,yes
.Ve
.IP "\fB\-\-outPlotParams\fR <Name,Value,...>  [default: auto]" 4
.IX Item "--outPlotParams <Name,Value,...> [default: auto]"
A comma delimited list of parameter name and value pairs for generating
plots using Seaborn module. The supported parameter names along with their
default values are shown below:
.Sp
.Vb 4
\&    type,linepoint,outExt,svg,width,10,height,5.6,
\&    title,auto,xlabel,auto,ylabel,auto,titleWeight,bold,labelWeight,bold
\&    style,darkgrid,palette,deep,font,sans\-serif,fontScale,1,
\&    context,notebook
.Ve
.Sp
Possible values:
.Sp
.Vb 9
\&    type: linepoint, scatter, or line. Both points and lines are drawn
\&        for linepoint plot type.
\&    outExt: Any valid format supported by Python module Matplotlib.
\&        For example: PDF (.pdf), PNG (.png), PS (.ps), SVG (.svg)
\&    titleWeight, labelWeight: Font weight for title and axes labels.
\&        Any valid value.
\&    style: darkgrid, whitegrid, dark, white, ticks
\&    palette: deep, muted, pastel, dark, bright, colorblind
\&    font: Any valid font name
.Ve
.IP "\fB\-\-outPlotRelativeEnergy\fR <yes or no>  [default: yes]" 4
.IX Item "--outPlotRelativeEnergy <yes or no> [default: yes]"
Plot relative energies in the torsion plot. The minimum energy value is
subtracted from energy values to calculate relative energies.
.IP "\fB\-\-outPlotTitleTorsionSpec\fR <yes or no>  [default: yes]" 4
.IX Item "--outPlotTitleTorsionSpec <yes or no> [default: yes]"
Append torsion specification to the title of the torsion plot.
.IP "\fB\-\-overwrite\fR" 4
.IX Item "--overwrite"
Overwrite existing files.
.IP "\fB\-\-precision\fR <number>  [default: 6]" 4
.IX Item "--precision <number> [default: 6]"
Floating point precision for writing energy values.
.IP "\fB\-\-psi4OptionsParams\fR <Name,Value,...>  [default: none]" 4
.IX Item "--psi4OptionsParams <Name,Value,...> [default: none]"
A comma delimited list of Psi4 option name and value pairs for setting
global and module options. The names are 'option_name' for global options
and 'module_name_\|_option_name' for options local to a module. The
specified option names must be valid Psi4 names. No validation is
performed.
.Sp
The specified option name and  value pairs are processed and passed to
psi4.\fIset_options()\fR as a dictionary. The supported value types are float,
integer, boolean, or string. The float value string is converted into a float.
The valid values for a boolean string are yes, no, true, false, on, or off.
.IP "\fB\-\-psi4RunParams\fR <Name,Value,...>  [default: auto]" 4
.IX Item "--psi4RunParams <Name,Value,...> [default: auto]"
A comma delimited list of parameter name and value pairs for configuring
Psi4 jobs.
.Sp
The supported parameter names along with their default and possible
values are shown below:
.Sp
.Vb 5
\&    MemoryInGB, 1
\&    NumThreads, 1
\&    OutputFile, auto   [ Possible  values: stdout, quiet, or FileName ]
\&    ScratchDir, auto   [ Possivle values: DirName]
\&    RemoveOutputFile, yes   [ Possible values: yes, no, true, or false]
.Ve
.Sp
These parameters control the runtime behavior of Psi4.
.Sp
The default file name for 'OutputFile' is <InFileRoot>_Psi4.out. The \s-1PID\s0
is appended to output file name during multiprocessing as shown:
<InFileRoot>_Psi4_<PIDNum>.out. The 'stdout' value for 'OutputType'
sends Psi4 output to stdout. The 'quiet' or 'devnull' value suppresses
all Psi4 output. The 'OutputFile' is set to 'quiet' for 'auto' value during 
\&'Conformers' of '\-\-mpLevel' option.
.Sp
The default 'Yes' value of 'RemoveOutputFile' option forces the removal
of any existing Psi4 before creating new files to append output from
multiple Psi4 runs.
.Sp
The option 'ScratchDir' is a directory path to the location of scratch
files. The default value corresponds to Psi4 default. It may be used to
override the deafult path.
.IP "\fB\-q, \-\-quiet\fR <yes or no>  [default: no]" 4
.IX Item "-q, --quiet <yes or no> [default: no]"
Use quiet mode. The warning and information messages will not be printed.
.IP "\fB\-\-reference\fR <text>  [default: auto]" 4
.IX Item "--reference <text> [default: auto]"
Reference wave function to use for energy calculation or constrained energy
minimization. Default: \s-1RHF\s0 or \s-1UHF.\s0 The default values are Restricted Hartree-Fock
(\s-1RHF\s0) for closed-shell molecules with all electrons paired and Unrestricted
Hartree-Fock (\s-1UHF\s0) for open-shell molecules with unpaired electrons.
.Sp
The specified value must be a valid Psi4 reference wave function. No validation
is performed. For example: \s-1ROHF, CUHF, RKS,\s0 etc.
.Sp
The spin multiplicity determines the default value of reference wave function
for input molecules. It is calculated from number of free radical electrons using
Hund's rule of maximum multiplicity defined as 2S + 1 where S is the total
electron spin. The total spin is 1/2 the number of free radical electrons in a 
molecule. The value of 'SpinMultiplicity' molecule property takes precedence
over the calculated value of spin multiplicity.
.IP "\fB\-t, \-\-torsions\fR <\s-1SMILES/SMARTS,...,...\s0>" 4
.IX Item "-t, --torsions <SMILES/SMARTS,...,...>"
\&\s-1SMILES/SMARTS\s0 patterns corresponding to torsion specifications. It's a 
comma delimited list of valid \s-1SMILES/SMART\s0 patterns.
.Sp
A substructure match is performed to select torsion atoms in a molecule.
The \s-1SMILES\s0 pattern match must correspond to four torsion atoms. The
\&\s-1SMARTS\s0 patterns containing atom map numbers  may match  more than four
atoms. The atom map numbers, however, must match exactly four torsion
atoms. For example: [s:1][c:2]([aX2,cH1])!@[\s-1CX3:3\s0](O)=[O:4] for thiophene
esters and carboxylates as specified in Torsion Library (TorLib) [Ref 146].
.IP "\fB\-\-torsionsFilterbyAtomIndices\fR <Index1, Index2, ...>  [default: none]" 4
.IX Item "--torsionsFilterbyAtomIndices <Index1, Index2, ...> [default: none]"
Comma delimited list of atom indices for filtering torsion matches
corresponding to torsion specifications  \*(L"\-t, \-\-torsions\*(R". The atom indices
must be valid. No explicit validation is performed. The list must contain at
least 4 atom indices.
.Sp
The torsion atom indices, matched by \*(L"\-t, \-\-torsions\*(R" specifications, must be
present in the list. Otherwise, the torsion matches are ignored.
.IP "\fB\-\-torsionMaxMatches\fR <number>  [default: 5]" 4
.IX Item "--torsionMaxMatches <number> [default: 5]"
Maximum number of torsions to match for each torsion specification in a
molecule.
.IP "\fB\-\-torsionMinimize\fR <yes or no>  [default: no]" 4
.IX Item "--torsionMinimize <yes or no> [default: no]"
Perform constrained energy minimization on a conformation ensemble
for  a specific torsion angle and select the lowest energy conformation
representing the torsion angle. A conformation ensemble is generated for
each 3D structure representing a specific torsion angle using a combination
of distance geometry and forcefield followed by constrained geometry
optimization using a quantum chemistry method.
.IP "\fB\-\-torsionRange\fR <Start,Stop,Step>  [default: 0,360,5]" 4
.IX Item "--torsionRange <Start,Stop,Step> [default: 0,360,5]"
Start, stop, and step size angles in degrees for a torsion scan. In addition,
you may specify values using start and stop angles from \-180 to 180.
.IP "\fB\-\-useChirality\fR <yes or no>  [default: no]" 4
.IX Item "--useChirality <yes or no> [default: no]"
Use chirrality during substructure matches for identification of torsions.
.IP "\fB\-w, \-\-workingdir\fR <dir>" 4
.IX Item "-w, --workingdir <dir>"
Location of working directory which defaults to the current directory.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
To perform a torsion scan on the first molecule in a \s-1SMILES\s0 file using a minimum
energy structure of the molecule selected from an initial ensemble of conformations
generated using distance geometry and forcefield, skip generation of conformation
ensembles for specific torsion angles and constrained energy minimization of the
ensemble, calculating single point at a specific torsion angle energy using B3LYP/6\-31G**
and B3LYP/6\-31+G** for non-sulfur and sulfur containing molecules, generate output files
corresponding to structure, energy and torsion plot, type:
.PP
.Vb 2
\&    % Psi4PerformTorsionScan.py  \-t "CCCC" \-i Psi4SampleTorsionScan.smi 
\&      \-o SampleOut.sdf
.Ve
.PP
To run the previous example on the first molecule in a \s-1SD\s0 file containing 3D
coordinates and skip the generations of initial 3D structure, type:
.PP
.Vb 2
\&    % Psi4PerformTorsionScan.py  \-t "CCCC"  \-\-infile3D yes
\&      \-i Psi4SampleTorsionScan3D.sdf  \-o SampleOut.sdf
.Ve
.PP
To run the first example on all molecules in a \s-1SD\s0 file, type:
.PP
.Vb 2
\&    % Psi4PerformTorsionScan.py  \-t "CCCC" \-\-modeMols All
\&      \-i Psi4SampleTorsionScan.sdf \-o SampleOut.sdf
.Ve
.PP
To run the first example on all molecules in a \s-1SD\s0 file containing 3D
coordinates and skip the generation of initial 3D structures, type:
.PP
.Vb 2
\&    % Psi4PerformTorsionScan.py  \-t "CCCC"  \-\-infile3D yes
\&      \-\-modeMols All \-i Psi4SampleTorsionScan3D.sdf  \-o SampleOut.sdf
.Ve
.PP
To perform a torsion scan on the first molecule in a \s-1SMILES\s0 file using a minimum
energy structure of the molecule selected from an initial ensemble of conformations
generated using distance geometry and forcefield,  generate up to 50 conformations
for specific torsion angles using \s-1ETKDG\s0 methodology followed by initial \s-1MMFF\s0
forcefield minimization and final energy minimization using B3LYP/6\-31G** and
B3LYP/6\-31+G** for non-sulfur and sulfur containing molecules, generate output files
corresponding to minimum energy structure, energy and torsion plot, type:
.PP
.Vb 2
\&    % Psi4PerformTorsionScan.py  \-t "CCCC" \-\-torsionMinimize Yes
\&       \-i Psi4SampleTorsionScan.smi \-o SampleOut.sdf
.Ve
.PP
To run the previous example on all molecules in a \s-1SD\s0 file, type:
.PP
.Vb 2
\&    % Psi4PerformTorsionScan.py  \-t "CCCC" \-\-modeMols All
\&       \-\-torsionMinimize Yes \-i Psi4SampleTorsionScan.sdf \-o SampleOut.sdf
.Ve
.PP
To run the previous example on all molecules in a \s-1SD\s0 file containing 3D
coordinates and skip the generation of initial 3D structures, type:
.PP
.Vb 3
\&    % Psi4PerformTorsionScan.py  \-t "CCCC" \-\-modeMols All
\&       \-\-infile3D yes \-\-modeMols All  \-\-torsionMinimize Yes
\&       \-i Psi4SampleTorsionScan.sdf \-o SampleOut.sdf
.Ve
.PP
To run the previous example in multiprocessing mode at molecules level
on all available CPUs without loading all data into memory and write out
a \s-1SD\s0 file, type:
.PP
.Vb 2
\&    % Psi4PerformTorsionScan.py  \-t "CCCC" \-i Psi4SampleTorsionScan.smi 
\&      \-o SampleOut.sdf \-\-modeMols All \-\-torsionMinimize Yes \-\-mp yes
.Ve
.PP
To run the previous example in multiprocessing mode at torsion angles level
on all available CPUs without loading all data into memory and write out
a \s-1SD\s0 file, type:
.PP
.Vb 3
\&    % Psi4PerformTorsionScan.py  \-t "CCCC" \-i Psi4SampleTorsionScan.smi 
\&      \-o SampleOut.sdf \-\-modeMols All \-\-torsionMinimize Yes \-\-mp yes
\&      \-\-mpLevel TorsionAngles
.Ve
.PP
To run the previous example in multiprocessing mode on all available CPUs
by loading all data into memory and write out a \s-1SD\s0 file, type:
.PP
.Vb 3
\&    % Psi4PerformTorsionScan.py  \-t "CCCC" \-i Psi4SampleTorsionScan.smi 
\&      \-o SampleOut.sdf \-\-modeMols All \-\-torsionMinimize Yes \-\-mp yes
\&      \-\-mpParams "inputDataMode,InMemory"
.Ve
.PP
To run the previous example in multiprocessing mode on specific number of
CPUs and chunk size without loading all data into memory and write out a \s-1SD\s0 file,
type:
.PP
.Vb 3
\&    % Psi4PerformTorsionScan.py  \-t "CCCC" \-i Psi4SampleTorsionScan.smi 
\&      \-o SampleOut.sdf \-\-modeMols All \-\-torsionMinimize Yes \-\-mp yes
\&      \-\-mpParams "inputDataMode,Lazy,numProcesses,4,chunkSize,8"
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Manish Sud(msud@san.rr.com)
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Psi4CalculateEnergy.py, Psi4GenerateConformers.py,
Psi4GenerateConstrainedConformers.py, Psi4PerformConstrainedMinimization.py
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2022 Manish Sud. All rights reserved.
.PP
The functionality available in this script is implemented using RDKit, an
open source toolkit for cheminformatics developed by Greg Landrum.
.PP
This file is part of MayaChemTools.
.PP
MayaChemTools is free software; you can redistribute it and/or modify it under
the terms of the \s-1GNU\s0 Lesser General Public License as published by the Free
Software Foundation; either version 3 of the License, or (at your option) any
later version.
