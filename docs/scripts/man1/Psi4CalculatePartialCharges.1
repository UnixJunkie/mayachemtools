.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Psi4CalculatePartialCharges 1"
.TH Psi4CalculatePartialCharges 1 "2022-09-25" "perl v5.22.4" "MayaChemTools"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Psi4CalculatePartialCharges.py \- Calculate partial atomic charges
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Psi4CalculatePartialCharges.py [\fB\-\-basisSet\fR <text>] [\fB\-\-chargesType\fR <Mulliken or Lowdin>] [\fB\-\-chargesRespParams\fR <Name,Value,...>]
[\fB\-\-chargesSDFormat\fR <AtomAliases or DataField>] [\fB\-\-dataFieldLabel\fR <text>] [\fB\-\-infileParams\fR <Name,Value,...>]
[\fB\-\-methodName\fR <text>] [\fB\-\-mp\fR <yes or no>] [\fB\-\-mpParams\fR <Name, Value,...>] [ \fB\-\-outfileParams\fR <Name,Value,...> ]
[\fB\-\-overwrite\fR] [\fB\-\-precision\fR <number>] [\fB\-\-psi4OptionsParams\fR <Name,Value,...>] [\fB\-\-psi4RunParams\fR <Name,Value,...>] 
[\fB\-\-quiet\fR <yes or no>] [\fB\-\-reference\fR <text>] [\fB\-w\fR <dir>] \fB\-i\fR <infile> \fB\-o\fR <outfile>
.PP
Psi4CalculatePartialCharges.py \fB\-h\fR | \fB\-\-help\fR | \fB\-e\fR | \fB\-\-examples\fR
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Calculate partial atomic charges for molecules using a specified method name
and basis set. The molecules must have 3D coordinates in input file. The molecular
geometry is not optimized before the calculation. In addition, hydrogens must
be present for all molecules in input file. A single point energy calculation is 
performed before calculating the partial atomic charges. The 3D coordinates
are not modified during the calculation.
.PP
A Psi4 \s-1XYZ\s0 format geometry string is automatically generated for each molecule
in input file. It contains atom symbols and 3D coordinates for each atom in a
molecule. In addition, the formal charge and spin multiplicity are present in the
the geometry string. These values are either retrieved from molecule properties
named 'FormalCharge' and 'SpinMultiplicty' or dynamically calculated for a
molecule.
.PP
The supported input file formats are: Mol (.mol), \s-1SD \s0(.sdf, .sd)
.PP
The supported output file formats are: \s-1SD \s0(.sdf, .sd)
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\fB\-b, \-\-basisSet\fR <text>  [default: auto]" 4
.IX Item "-b, --basisSet <text> [default: auto]"
Basis set to use for calculating single point energy before partial atomic
charges. Default: 6\-31+G** for sulfur containing molecules; Otherwise,
6\-31G** [ Ref 150 ]. The specified value must be a valid Psi4 basis set.
No validation is performed.
.Sp
The following list shows a representative sample of basis sets available
in Psi4:
.Sp
.Vb 5
\&    STO\-3G, 6\-31G, 6\-31+G, 6\-31++G, 6\-31G*, 6\-31+G*,  6\-31++G*, 
\&    6\-31G**, 6\-31+G**, 6\-31++G**, 6\-311G, 6\-311+G, 6\-311++G,
\&    6\-311G*, 6\-311+G*, 6\-311++G*, 6\-311G**, 6\-311+G**, 6\-311++G**,
\&    cc\-pVDZ, cc\-pCVDZ, aug\-cc\-pVDZ, cc\-pVDZ\-DK, cc\-pCVDZ\-DK, def2\-SVP,
\&    def2\-SVPD, def2\-TZVP, def2\-TZVPD, def2\-TZVPP, def2\-TZVPPD
.Ve
.IP "\fB\-c, \-\-chargesType\fR <Mulliken, Lowdin, or \s-1RESP\s0>  [default: Mulliken]" 4
.IX Item "-c, --chargesType <Mulliken, Lowdin, or RESP> [default: Mulliken]"
Type of partial atomic charges to calculate. Possible values: Mulliken, Lowdin,
or \s-1RESP\s0 [ Ref 158 ]. Multiprocessing is not supported during the calculation
of \s-1RSEP\s0 charges. In addition, the \s-1RSEP\s0 calculation relies on the presence of
the \s-1RESP\s0 Psi4 Plugin in your environment.
.IP "\fB\-\-chargesRespParams\fR <Name,Value,...>  [default: auto]" 4
.IX Item "--chargesRespParams <Name,Value,...> [default: auto]"
A comma delimited list of parameter name and value  pairs for calculating
\&\s-1RESP\s0 [ Ref 158 ] charges. A space is used as a delimiter for multiple values in
a name and value pair. The supported parameter names, along with
their default values, are shown below:
.Sp
.Vb 9
\&    maxIter, 25
\&    restrainHydrogens, no
\&    removeGridFiles, yes
\&    respA, 0.0005
\&    respB, 0.1
\&    tolerance, 1e\-5
\&    vdwRadii, auto
\&    vdwScaleFactors, 1.4 1.6 1.8 2.0
\&    vdwPointDensity, 1.0
.Ve
.Sp
maxIter: Maximum number of iterations to perform during charge fitting.
.Sp
restrainHydrogens: Restrain hydrogens during charge fitting.
.Sp
removeGridFiles: Keep or remove the following \s-1ESP\s0 grid and output files:
1_default_grid.dat, 1_default_grid_esp.dat, results.out. The output
files are removed by default. You may optionally keep the output files. The
output files are automatically renamed to the following file for 'No' value of
\&'removeGridFiles': Mol<MolNum>_grid.dat, Mol<MolNum>_grid_esp.dat,
Mol<MolNum>_resp_results.out.
.Sp
respA: Scale factor defining the  asymptotic limits of the strength of the
restraint.
.Sp
respB: The 'tightness' of the hyperbola around its minimum for the
restraint.
.Sp
tolerance: Tolerance for charges during charge fitting to the \s-1ESP.\s0
.Sp
vdwRadii: vdw radii for elements in angstroms. It's a space delimited list of
element symbol and radius value pairs. The default list is shown below:
.Sp
.Vb 2
\&    H 1.20 He 1.20 Li 1.37 Be 1.45 B 1.45 C 1.50 N 1.50 O 1.40 F 1.35
\&    Ne 1.30 Na 1.57 Mg 1.36 Al 1.24 Si 1.17P 1.80 S 1.75 Cl 1.7
.Ve
.Sp
You may specify all or a subset of element symbol and vdw radius pairs to
update the default values.
.Sp
vdwScaleFactors: The vdw radii are scaled by the scale factors to set the
grid points at the shells for calculating the \s-1ESP\s0 using quantum methodology.
The default number of shells is 4 and corresponds to the number of vdw
scale factors.The 'shell' points are written to a grid file for calculating the \s-1ESP.\s0
.Sp
vdwPointDensity: Approximate number of points to generate per square
angstrom surface area.
.IP "\fB\-\-chargesSDFormat\fR <AtomAliases or DataField>  [default: AtomAliases]" 4
.IX Item "--chargesSDFormat <AtomAliases or DataField> [default: AtomAliases]"
Format for writing out partial atomic charges to \s-1SD\s0 file. Possible values:
AtomAliases or DataField.
.Sp
The charges are stored as atom property named 'molFileAlias' for
\&'AtomAliases' format and may be retrieved using the RDKit function
\&'GetProp' for atoms: Aotm.GetProp('molFileAliases').
.Sp
The charges are stored under a data field label specified using
\&'\-d, \-\-dataFieldLabel' for 'DataField' format and may be retrieved using the
RDKit function 'GetProp' for molecules.
.IP "\fB\-d, \-\-dataFieldLabel\fR <text>  [default: auto]" 4
.IX Item "-d, --dataFieldLabel <text> [default: auto]"
Data field label to use for storing charged in \s-1SD\s0 file during 'DataField' value
of '\-c, \-\-chargesSDFormat'. Default: Psi4_<ChargesType>_Charges (a.u.)
.IP "\fB\-e, \-\-examples\fR" 4
.IX Item "-e, --examples"
Print examples.
.IP "\fB\-h, \-\-help\fR" 4
.IX Item "-h, --help"
Print this help message.
.IP "\fB\-i, \-\-infile\fR <infile>" 4
.IX Item "-i, --infile <infile>"
Input file name.
.IP "\fB\-\-infileParams\fR <Name,Value,...>  [default: auto]" 4
.IX Item "--infileParams <Name,Value,...> [default: auto]"
A comma delimited list of parameter name and value pairs for reading
molecules from files. The supported parameter names for different file
formats, along with their default values, are shown below:
.Sp
.Vb 1
\&    SD, MOL: removeHydrogens,no,sanitize,yes,strictParsing,yes
.Ve
.IP "\fB\-m, \-\-methodName\fR <text>  [default: auto]" 4
.IX Item "-m, --methodName <text> [default: auto]"
Method to use for calculating single point energy before partial atomic
charges. Default: B3LYP [ Ref 150 ]. The specified value must be a valid
Psi4 method name. No validation is performed.
.Sp
The following list shows a representative sample of methods available
in Psi4:
.Sp
.Vb 4
\&    B1LYP, B2PLYP, B2PLYP\-D3BJ, B2PLYP\-D3MBJ, B3LYP, B3LYP\-D3BJ,
\&    B3LYP\-D3MBJ, CAM\-B3LYP, CAM\-B3LYP\-D3BJ, HF, HF\-D3BJ,  HF3c, M05,
\&    M06, M06\-2x, M06\-HF, M06\-L, MN12\-L, MN15, MN15\-D3BJ,PBE, PBE0,
\&    PBEH3c, PW6B95, PW6B95\-D3BJ, WB97, WB97X, WB97X\-D, WB97X\-D3BJ
.Ve
.IP "\fB\-\-mp\fR <yes or no>  [default: no]" 4
.IX Item "--mp <yes or no> [default: no]"
Use multiprocessing.
.Sp
By default, input data is retrieved in a lazy manner via mp.Pool.\fIimap()\fR
function employing lazy RDKit data iterable. This allows processing of
arbitrary large data sets without any additional requirements memory.
.Sp
All input data may be optionally loaded into memory by mp.Pool.\fImap()\fR
before starting worker processes in a process pool by setting the value
of 'inputDataMode' to 'InMemory' in '\-\-mpParams' option.
.Sp
A word to the wise: The default 'chunkSize' value of 1 during 'Lazy' input
data mode may adversely impact the performance. The '\-\-mpParams' section
provides additional information to tune the value of 'chunkSize'.
.IP "\fB\-\-mpParams\fR <Name,Value,...>  [default: auto]" 4
.IX Item "--mpParams <Name,Value,...> [default: auto]"
A comma delimited list of parameter name and value pairs to configure
multiprocessing.
.Sp
The supported parameter names along with their default and possible
values are shown below:
.Sp
.Vb 3
\&    chunkSize, auto
\&    inputDataMode, Lazy   [ Possible values: InMemory or Lazy ]
\&    numProcesses, auto   [ Default: mp.cpu_count() ]
.Ve
.Sp
These parameters are used by the following functions to configure and
control the behavior of multiprocessing: mp.\fIPool()\fR, mp.Pool.\fImap()\fR, and
mp.Pool.\fIimap()\fR.
.Sp
The chunkSize determines chunks of input data passed to each worker
process in a process pool by mp.Pool.\fImap()\fR and mp.Pool.\fIimap()\fR functions.
The default value of chunkSize is dependent on the value of 'inputDataMode'.
.Sp
The mp.Pool.\fImap()\fR function, invoked during 'InMemory' input data mode,
automatically converts RDKit data iterable into a list, loads all data into
memory, and calculates the default chunkSize using the following method
as shown in its code:
.Sp
.Vb 2
\&    chunkSize, extra = divmod(len(dataIterable), len(numProcesses) * 4)
\&    if extra: chunkSize += 1
.Ve
.Sp
For example, the default chunkSize will be 7 for a pool of 4 worker processes
and 100 data items.
.Sp
The mp.Pool.\fIimap()\fR function, invoked during 'Lazy' input data mode, employs
\&'lazy' RDKit data iterable to retrieve data as needed, without loading all the
data into memory. Consequently, the size of input data is not known a priori.
It's not possible to estimate an optimal value for the chunkSize. The default 
chunkSize is set to 1.
.Sp
The default value for the chunkSize during 'Lazy' data mode may adversely
impact the performance due to the overhead associated with exchanging
small chunks of data. It is generally a good idea to explicitly set chunkSize to
a larger value during 'Lazy' input data mode, based on the size of your input
data and number of processes in the process pool.
.Sp
The mp.Pool.\fImap()\fR function waits for all worker processes to process all
the data and return the results. The mp.Pool.\fIimap()\fR function, however,
returns the the results obtained from worker processes as soon as the
results become available for specified chunks of data.
.Sp
The order of data in the results returned by both mp.Pool.\fImap()\fR and 
mp.Pool.\fIimap()\fR functions always corresponds to the input data.
.IP "\fB\-o, \-\-outfile\fR <outfile>" 4
.IX Item "-o, --outfile <outfile>"
Output file name.
.IP "\fB\-\-outfileParams\fR <Name,Value,...>  [default: auto]" 4
.IX Item "--outfileParams <Name,Value,...> [default: auto]"
A comma delimited list of parameter name and value pairs for writing
molecules to files. The supported parameter names for different file
formats, along with their default values, are shown below:
.Sp
.Vb 1
\&    SD: kekulize,yes
.Ve
.IP "\fB\-\-overwrite\fR" 4
.IX Item "--overwrite"
Overwrite existing files.
.IP "\fB\-\-precision\fR <number>  [default: 4]" 4
.IX Item "--precision <number> [default: 4]"
Floating point precision for writing energy values.
.IP "\fB\-\-psi4OptionsParams\fR <Name,Value,...>  [default: none]" 4
.IX Item "--psi4OptionsParams <Name,Value,...> [default: none]"
A comma delimited list of Psi4 option name and value pairs for setting
global and module options. The names are 'option_name' for global options
and 'module_name_\|_option_name' for options local to a module. The
specified option names must be valid Psi4 names. No validation is
performed.
.Sp
The specified option name and  value pairs are processed and passed to
psi4.\fIset_options()\fR as a dictionary. The supported value types are float,
integer, boolean, or string. The float value string is converted into a float.
The valid values for a boolean string are yes, no, true, false, on, or off.
.IP "\fB\-\-psi4RunParams\fR <Name,Value,...>  [default: auto]" 4
.IX Item "--psi4RunParams <Name,Value,...> [default: auto]"
A comma delimited list of parameter name and value pairs for configuring
Psi4 jobs.
.Sp
The supported parameter names along with their default and possible
values are shown below:
.Sp
.Vb 5
\&    MemoryInGB, 1
\&    NumThreads, 1
\&    OutputFile, auto   [ Possible  values: stdout, quiet, or FileName ]
\&    ScratchDir, auto   [ Possivle values: DirName]
\&    RemoveOutputFile, yes   [ Possible values: yes, no, true, or false]
.Ve
.Sp
These parameters control the runtime behavior of Psi4.
.Sp
The default file name for 'OutputFile' is <InFileRoot>_Psi4.out. The \s-1PID\s0
is appended to output file name during multiprocessing as shown:
<InFileRoot>_Psi4_<PIDNum>.out. The 'stdout' value for 'OutputType'
sends Psi4 output to stdout. The 'quiet' or 'devnull' value suppresses
all Psi4 output.
.Sp
The default 'Yes' value of 'RemoveOutputFile' option forces the removal
of any existing Psi4 before creating new files to append output from
multiple Psi4 runs.
.Sp
The option 'ScratchDir' is a directory path to the location of scratch
files. The default value corresponds to Psi4 default. It may be used to
override the deafult path.
.IP "\fB\-q, \-\-quiet\fR <yes or no>  [default: no]" 4
.IX Item "-q, --quiet <yes or no> [default: no]"
Use quiet mode. The warning and information messages will not be printed.
.IP "\fB\-r, \-\-reference\fR <text>  [default: auto]" 4
.IX Item "-r, --reference <text> [default: auto]"
Reference wave function to use for calculating single point energy before
partial atomic charges. Default: \s-1RHF\s0 or \s-1UHF.\s0 The default values are Restricted
Hartree-Fock (\s-1RHF\s0) for closed-shell molecules with all electrons paired and
Unrestricted Hartree-Fock (\s-1UHF\s0) for open-shell molecules with unpaired electrons.
.Sp
The specified value must be a valid Psi4 reference wave function. No validation
is performed. For example: \s-1ROHF, CUHF, RKS,\s0 etc.
.Sp
The spin multiplicity determines the default value of reference wave function
for input molecules. It is calculated from number of free radical electrons using
Hund's rule of maximum multiplicity defined as 2S + 1 where S is the total
electron spin. The total spin is 1/2 the number of free radical electrons in a 
molecule. The value of 'SpinMultiplicity' molecule property takes precedence
over the calculated value of spin multiplicity.
.IP "\fB\-w, \-\-workingdir\fR <dir>" 4
.IX Item "-w, --workingdir <dir>"
Location of working directory which defaults to the current directory.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
To calculate Mulliken partial atomic charges using  B3LYP/6\-31G** and
B3LYP/6\-31+G** for non-sulfur and sulfur containing molecules in a \s-1SD\s0
file with 3D structures, use \s-1RHF\s0 and \s-1UHF\s0 for closed-shell and open-shell
molecules, and write a new \s-1SD\s0 file, type:
.PP
.Vb 2
\&    % Psi4CalculatePartialCharges.py  \-i Psi4Sample3D.sdf 
\&      \-o Psi4Sample3DOut.sdf
.Ve
.PP
To run the first example for calculating \s-1RESP\s0 charges using a default set of
parameters for the \s-1RESP\s0 calculation and write out a \s-1SD\s0 file, type:
.PP
.Vb 2
\&    % Psi4CalculatePartialCharges.py  \-\-chargesType RESP
\&       \-i Psi4Sample3D.sdf \-o Psi4Sample3DOut.sdf
.Ve
.PP
To run the first example for calculating \s-1RESP\s0 charges using an explicit set
of specific parameters for the \s-1RESP\s0 calculation and write out a \s-1SD\s0 file, type:
.PP
.Vb 3
\&    % Psi4CalculatePartialCharges.py  \-\-chargesType RESP
\&       \-\-chargesRespParams "respA, 0.0005, respB, 0.1, vdwScaleFactors,
\&       1.4 1.6 1.8 2.0" \-i Psi4Sample3D.sdf \-o Psi4Sample3DOut.sdf
.Ve
.PP
To run the first example in multiprocessing mode on all available CPUs
without loading all data into memory and write out a \s-1SD\s0 file, type:
.PP
.Vb 2
\&    % Psi4CalculatePartialCharges.py \-\-mp yes \-i Psi4Sample3D.sdf
\&      \-o Psi4Sample3DOut.sdf
.Ve
.PP
To run the first example in multiprocessing mode on all available CPUs
by loading all data into memory and write out a \s-1SD\s0 file, type:
.PP
.Vb 2
\&    % Psi4CalculatePartialCharges.py  \-\-mp yes \-\-mpParams "inputDataMode,
\&      InMemory" \-i Psi4Sample3D.sdf  \-o Psi4Sample3DOut.sdf
.Ve
.PP
To run the first example in multiprocessing mode on all available CPUs
without loading all data into memory along with multiple threads for each
Psi4 run and write out a \s-1SD\s0 file, type:
.PP
.Vb 2
\&    % Psi4CalculatePartialCharges.py \-\-mp yes \-\-psi4RunParams "NumThreads,2"
\&       \-i Psi4Sample3D.sdf \-o Psi4Sample3DOut.sdf
.Ve
.PP
To run the first example for writing out charges to a new \s-1SD\s0 file under a
datafield instead of storing them as atom property, type:
.PP
.Vb 2
\&    % Psi4CalculatePartialCharges.py  \-\-chargesSDFormat DataField
\&      \-i Psi4Sample3D.sdf  \-o Psi4Sample3DOut.sdf
.Ve
.PP
To calculate specific partial atomic charges using a specific method  and basis
set for molecules in a \s-1SD\s0 ontaining 3D structures and write them out to a specific
datafield in a new \s-1SD\s0 file, type:
.PP
.Vb 3
\&    % Psi4CalculatePartialCharges.py  \-c Lowdin \-m SCF \-b aug\-cc\-pVDZ
\&      \-\-chargesSDFormat DataField \-\-dataFieldLabel "Lowdin_Charges"
\&      \-i Psi4Sample3D.sdf  \-o Psi4Sample3DOut.sdf
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Manish Sud(msud@san.rr.com)
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Psi4CalculateEnergy.py, Psi4PerformMinimization.py, Psi4GenerateConformers.py
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2022 Manish Sud. All rights reserved.
.PP
The functionality available in this script is implemented using Psi4, an
open source quantum chemistry software package, and RDKit, an open
source toolkit for cheminformatics developed by Greg Landrum.
.PP
This file is part of MayaChemTools.
.PP
MayaChemTools is free software; you can redistribute it and/or modify it under
the terms of the \s-1GNU\s0 Lesser General Public License as published by the Free
Software Foundation; either version 3 of the License, or (at your option) any
later version.
