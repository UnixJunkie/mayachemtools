.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "RDKitStandardizeMolecules 1"
.TH RDKitStandardizeMolecules 1 "2022-09-25" "perl v5.22.4" "MayaChemTools"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
RDKitStandardizeMolecules.py \- Standardize molecules
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
RDKitStandardizeMolecules.py [\fB\-\-infileParams\fR <Name,Value,...>] [\fB\-\-methodologyParams\fR <Name,Value,...>]
[\fB\-\-mode\fR <standardize or count>] [\fB\-\-mp\fR <yes or no>] [\fB\-\-mpParams\fR <Name,Value,...>]
[\fB\-\-outfileParams\fR <Name,Value,...> ] [\fB\-\-overwrite\fR] [\fB\-\-standardizeParams\fR <Name,Value,...>]
[\fB\-\-quiet\fR <yes or no>] [\fB\-w\fR <dir>] [\fB\-o\fR <outfile>] \fB\-i\fR <infile>
.PP
RDKitStandardizeMolecules.py \fB\-h\fR | \fB\-\-help\fR | \fB\-e\fR | \fB\-\-examples\fR
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Standardize molecules and write them out to an output file or simply count
the number of molecules to be standardized. The standardization methodology
consists of the following 4 steps executed in a sequential manner:
.PP
.Vb 4
\&    1. Cleanup molecules
\&    2. Keep largest fragment
\&    3. Neutralize molecules
\&    4. Select canonical tautomer
.Ve
.PP
The molecules are cleaned up by performing the following actions:
.PP
.Vb 7
\&    1. Remove hydrogens
\&    2. Disconnect metal atoms \- Disconnect metal atoms covalently bonded
\&        to non\-metals
\&    3. Normalize \- Normalize functional groups and recombine charges
\&    4. Reionize \- Ionize strongest acid groups first in partially
\&        ionized molecules
\&    5. Assign stereochemistry
.Ve
.PP
You may optionally skip any cleanup action during standardization.
.PP
The supported input file formats are: \s-1SD \s0(.sdf, .sd), \s-1SMILES \s0(.smi., csv, .tsv, .txt)
.PP
The supported output file formats are: \s-1SD \s0(.sdf, .sd), \s-1SMILES \s0(.smi)
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\fB\-e, \-\-examples\fR" 4
.IX Item "-e, --examples"
Print examples.
.IP "\fB\-h, \-\-help\fR" 4
.IX Item "-h, --help"
Print this help message.
.IP "\fB\-i, \-\-infile\fR <infile>" 4
.IX Item "-i, --infile <infile>"
Input file name.
.IP "\fB\-\-infileParams\fR <Name,Value,...>  [default: auto]" 4
.IX Item "--infileParams <Name,Value,...> [default: auto]"
A comma delimited list of parameter name and value pairs for reading
molecules from files. The supported parameter names for different file
formats, along with their default values, are shown below:
.Sp
.Vb 3
\&    SD, MOL: removeHydrogens,no,sanitize,yes,strictParsing,yes
\&    SMILES: smilesColumn,1,smilesNameColumn,2,smilesDelimiter,space,
\&        smilesTitleLine,auto,sanitize,yes
.Ve
.Sp
Possible values for smilesDelimiter: space, comma or tab.
.IP "\fB\-m, \-\-mode\fR <standardize or count>  [default: standardize]" 4
.IX Item "-m, --mode <standardize or count> [default: standardize]"
Specify whether to standardize molecules and write them out or simply
count the number of molecules being standardized.
.IP "\fB\-\-methodologyParams\fR <Name,Value,...>  [default: auto]" 4
.IX Item "--methodologyParams <Name,Value,...> [default: auto]"
A comma delimited list of parameter name and value pairs to control
the execution of different steps in the standardization methodology. The
supported parameter names along with their default values are shown
below:
.Sp
.Vb 2
\&    cleanup,yes,removeFragments,yes,neutralize,yes,
\&    canonicalizeTautomer,yes
.Ve
.Sp
The standardization methodology consists of the following 4 steps executed
in a sequential manner starting from step 1:
.Sp
.Vb 4
\&    1. cleanup
\&    2. removeFragments
\&    3. neutralize
\&    4. canonicalizeTautomer
.Ve
.Sp
You may optionally skip the execution of any standardization step.
.Sp
The step1, cleanup, performs the following actions:
.Sp
.Vb 7
\&    1. Remove hydrogens
\&    2. Disconnect metal atoms \- Disconnect metal atoms covalently bonded
\&        to non\-metals
\&    3. Normalize \- Normalize functional groups and recombine charges
\&    4. Reionize \- Ionize strongest acid groups first in partially
\&        ionized molecules
\&    5. Assign stereochemistry
.Ve
.Sp
You may optionally skip any cleanup action using '\-s, \-\-standardize' option.
.Sp
The step2, removeFragments, employs rdMolStandardize.\fIFragmentParent()\fR
function to keep the largest fragment.
.Sp
The step3, neutralize, uses rdMolStandardize.\fIUncharger()\fR.\fIuncharge()\fR
function to neutralize molecules by adding/removing hydrogens.
.Sp
The step4, canonicalizeTautomer, relies on \fICanonicalize()\fR function availabe via
rdMolStandardize.\fITautomerEnumerator()\fR to select a canonical tautomer.
.IP "\fB\-\-mp\fR <yes or no>  [default: no]" 4
.IX Item "--mp <yes or no> [default: no]"
Use multiprocessing.
.Sp
By default, input data is retrieved in a lazy manner via mp.Pool.\fIimap()\fR
function employing lazy RDKit data iterable. This allows processing of
arbitrary large data sets without any additional requirements memory.
.Sp
All input data may be optionally loaded into memory by mp.Pool.\fImap()\fR
before starting worker processes in a process pool by setting the value
of 'inputDataMode' to 'InMemory' in '\-\-mpParams' option.
.Sp
A word to the wise: The default 'chunkSize' value of 1 during 'Lazy' input
data mode may adversely impact the performance. The '\-\-mpParams' section
provides additional information to tune the value of 'chunkSize'.
.IP "\fB\-\-mpParams\fR <Name,Value,...>  [default: auto]" 4
.IX Item "--mpParams <Name,Value,...> [default: auto]"
A comma delimited list of parameter name and value pairs to configure
multiprocessing.
.Sp
The supported parameter names along with their default and possible
values are shown below:
.Sp
.Vb 3
\&    chunkSize, auto
\&    inputDataMode, Lazy   [ Possible values: InMemory or Lazy ]
\&    numProcesses, auto   [ Default: mp.cpu_count() ]
.Ve
.Sp
These parameters are used by the following functions to configure and
control the behavior of multiprocessing: mp.\fIPool()\fR, mp.Pool.\fImap()\fR, and
mp.Pool.\fIimap()\fR.
.Sp
The chunkSize determines chunks of input data passed to each worker
process in a process pool by mp.Pool.\fImap()\fR and mp.Pool.\fIimap()\fR functions.
The default value of chunkSize is dependent on the value of 'inputDataMode'.
.Sp
The mp.Pool.\fImap()\fR function, invoked during 'InMemory' input data mode,
automatically converts RDKit data iterable into a list, loads all data into
memory, and calculates the default chunkSize using the following method
as shown in its code:
.Sp
.Vb 2
\&    chunkSize, extra = divmod(len(dataIterable), len(numProcesses) * 4)
\&    if extra: chunkSize += 1
.Ve
.Sp
For example, the default chunkSize will be 7 for a pool of 4 worker processes
and 100 data items.
.Sp
The mp.Pool.\fIimap()\fR function, invoked during 'Lazy' input data mode, employs
\&'lazy' RDKit data iterable to retrieve data as needed, without loading all the
data into memory. Consequently, the size of input data is not known a priori.
It's not possible to estimate an optimal value for the chunkSize. The default 
chunkSize is set to 1.
.Sp
The default value for the chunkSize during 'Lazy' data mode may adversely
impact the performance due to the overhead associated with exchanging
small chunks of data. It is generally a good idea to explicitly set chunkSize to
a larger value during 'Lazy' input data mode, based on the size of your input
data and number of processes in the process pool.
.Sp
The mp.Pool.\fImap()\fR function waits for all worker processes to process all
the data and return the results. The mp.Pool.\fIimap()\fR function, however,
returns the the results obtained from worker processes as soon as the
results become available for specified chunks of data.
.Sp
The order of data in the results returned by both mp.Pool.\fImap()\fR and 
mp.Pool.\fIimap()\fR functions always corresponds to the input data.
.IP "\fB\-o, \-\-outfile\fR <outfile>" 4
.IX Item "-o, --outfile <outfile>"
Output file name.
.IP "\fB\-\-outfileParams\fR <Name,Value,...>  [default: auto]" 4
.IX Item "--outfileParams <Name,Value,...> [default: auto]"
A comma delimited list of parameter name and value pairs for writing
molecules to files. The supported parameter names for different file
formats, along with their default values, are shown below:
.Sp
.Vb 3
\&    SD: compute2DCoords,auto,kekulize,yes
\&    SMILES: smilesKekulize,no,smilesDelimiter,space, smilesIsomeric,yes,
\&        smilesTitleLine,yes,smilesMolName,yes,smilesMolProps,no
.Ve
.Sp
Default value for compute2DCoords: yes for \s-1SMILES\s0 input file; no for all other
file types.
.IP "\fB\-\-overwrite\fR" 4
.IX Item "--overwrite"
Overwrite existing files.
.IP "\fB\-q, \-\-quiet\fR <yes or no>  [default: no]" 4
.IX Item "-q, --quiet <yes or no> [default: no]"
Use quiet mode. The warning and information messages will not be printed.
.IP "\fB\-s, \-\-standardizeParams\fR <Name,Value,...>  [default: auto]" 4
.IX Item "-s, --standardizeParams <Name,Value,...> [default: auto]"
A comma delimited list of parameter name and value pairs for standardizing
molecules. The supported parameter names along with their default values
are shown below:
.Sp
.Vb 12
\&    acidbaseFile,none,fragmentFile,none,normalizationsFile,none,
\&    tautomerTransformsFile,none,
\&    cleanupRemoveHydrogens,yes,cleanupDisconnectMetals,yes,
\&    cleanupNormalize,yes,cleanupNormalizeMaxRestarts,200,
\&    cleanupReionize,yes,cleanupAssignStereo,yes,
\&    cleanupAssignStereoCleanIt,yes,cleanupAssignStereoForce,yes
\&    largestFragmentChooserUseAtomCount,yes,
\&    largestFragmentChooserCountHeavyAtomsOnly,no,preferOrganic,no,
\&    doCanonical,yes,
\&    maxTautomers,1000,maxTransforms,1000,
\&    tautomerRemoveBondStereo,yes,tautomerRemoveIsotopicHs,yes
\&    tautomerRemoveSp3Stereo,yes,tautomerReassignStereo,yes
.Ve
.Sp
A brief description of the standardization parameters, taken from RDKit
documentation, is as follows:
.Sp
.Vb 4
\&    acidbaseFile \- File containing acid and base definitions
\&    fragmentFile \- File containing fragment definitions
\&    normalizationsFile \- File conataining normalization transformations
\&    tautomerTransformsFile \- File containing tautomer transformations
\&    
\&    cleanupRemoveHydrogens \- Remove hydrogens druring cleanup
\&    cleanupDisconnectMetals \- Disconnect metal atoms covalently bonded
\&        to non\-metals during cleanup
\&    cleanupNormalize \- Normalize functional groups and recombine
\&        charges during cleanup
\&    cleanupNormalizeMaxRestarts \- Maximum number of restarts during
\&        normalization step of cleanup
\&    cleanupReionize \-Ionize strongest acid groups first in partially
\&        ionized molecules during cleanup
\&    cleanupAssignStereo \- Assign stererochemistry during cleanup
\&    cleanupAssignStereoCleanIt \- Clean property _CIPCode during
\&        assign stereochemistry 
\&    cleanupAssignStereoForce \- Always perform stereochemistry
\&        calculation during assign stereochemistry
\&    
\&    largestFragmentChooserUseAtomCount \- Use atom count as main
\&        criterion before molecular weight to determine largest fragment
\&        in LargestFragmentChooser
\&    largestFragmentChooserCountHeavyAtomsOnly \- Count only heavy
\&        atoms to determine largest fragment in LargestFragmentChooser
\&    preferOrganic \- Prefer organic fragments over  inorganic ones when
\&        choosing fragments
\&    
\&    doCanonical \- Apply atom\-order dependent normalizations in a
\&        canonical order during uncharging
\&    
\&    maxTautomers \- Maximum number of tautomers to generate
\&    maxTransforms \- Maximum number of transforms to apply during
\&        tautomer enumeration
\&    tautomerRemoveBondStereo \- Remove stereochemistry from double bonds
\&        involved in tautomerism
\&    tautomerRemoveIsotopicHs: Remove isotopic Hs from centers involved in tautomerism
\&    tautomerRemoveSp3Stereo \- Remove stereochemistry from sp3 centers
\&        involved in tautomerism
\&    tautomerReassignStereo \- AssignStereochemistry on all generated tautomers
.Ve
.Sp
The default value is set to none for the following  file name parameters:
acidbaseFile, fragmentFile, normalizationsFile, and tautomerTransformsFile.
The script relies on RDKit to automatically load appropriate acid base and
fragment definitions along with normalization and tautomer transformations
from a set of internal catalogs.
.Sp
Note: The fragmentFile doesn't appear to be used by the RDKit method
rdMolStandardize.\fIFragmentParent()\fR to find largest fragment.
.Sp
The contents  of various standardization definitions and transformations files
are described below:
.Sp
.Vb 1
\&    acidbaseFile \- File containing acid and base definitions
\&    
\&        // Name     Acid                 Base
\&        \-OSO3H      OS(=O)(=O)[OH]       OS(=O)(=O)[O\-]
\&        \-SO3H       [!O]S(=O)(=O)[OH]    [!O]S(=O)(=O)[O\-]
\&        \-OSO2H      O[SD3](=O)[OH]       O[SD3](=O)[O\-]
\&        ... ... ...
\&
\&    fragmentFile \- File containing fragment definitions
\&    
\&        // Name     SMARTS
\&        hydrogen     [H]
\&        fluorine     [F]
\&        chlorine     [Cl]
\&        ... ... ...
\&
\&    normalizationsFile \- File conataining normalization transformations
\&    
\&        // Name     SMIRKS
\&        Sulfone to S(=O)(=O)        [S+2:1]([O\-:2])([O\-:3])>>
\&            [S+0:1](=[O\-0:2])(=[O\-0:3])
\&        Pyridine oxide to n+O\-     [n:1]=[O:2]>>[n+:1][O\-:2]
\&        ... ... ...
\&
\&    tautomerTransformsFile \- File containing tautomer transformations
\&    
\&        // Name                SMARTS   Bonds  Charges
\&        1,3 (thio)keto/enol f  [CX4!H0]\-[C]=[O,S,Se,Te;X1]
\&        1,3 (thio)keto/enol r  [O,S,Se,Te;X2!H0]\-[C]=[C]
\&        1,5 (thio)keto/enol f  [CX4,NX3;!H0]\-[C]=[C][CH0]=[O,S,Se,Te;X1]
\&        ... ... ...
.Ve
.IP "\fB\-w, \-\-workingdir\fR <dir>" 4
.IX Item "-w, --workingdir <dir>"
Location of working directory which defaults to the current directory.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
To standardize molecules in a \s-1SMILES\s0 file by executing all standardization
steps and write out a \s-1SMILES\s0 file, type:
.PP
.Vb 1
\&    % RDKitStandardizeMolecules.py \-i Sample.smi \-o SampleOut.smi
.Ve
.PP
To standardize molecules in a \s-1SD\s0 file by executing all standardization
steps, performing standardization in multiprocessing mode on all available
CPUs without loading all data into memory, and write out and write out a
\&\s-1SD\s0 file, type:
.PP
.Vb 1
\&    % RDKitStandardizeMolecules.py \-\-mp yes \-i Sample.sdf \-o SampleOut.sdf
.Ve
.PP
To standardize molecules in a \s-1SMILES\s0 file by executing  all standardization
steps, performing standardization in multiprocessing mode on all available
CPUs by loading all data into memory, and write out and write out a
\&\s-1SMILES\s0 file, type:
.PP
.Vb 2
\&    % RDKitStandardizeMolecules.py \-\-mp yes \-\-mpParams "inputDataMode,
\&      InMemory" \-i Sample.smi \-o SampleOut.smi
.Ve
.PP
To standardize molecules in a \s-1SMILES\s0 file by executing  all standardization
steps, performing standardization in multiprocessing mode on specific number
of CPUs and chunk size without loading all data into memory, and write out a
a \s-1SMILES\s0 file, type:
.PP
.Vb 2
\&    % RDKitStandardizeMolecules.py \-\-mp yes \-\-mpParams "inputDataMode,Lazy,
\&      numProcesses,4,chunkSize,8" \-i Sample.smi \-o SampleOut.smi
.Ve
.PP
To count number of molecules to be standardized without generating any
output file, type:
.PP
.Vb 1
\&    % RDKitStandardizeMolecules.py \-m count \-i Sample.sdf
.Ve
.PP
To standardize molecules in a \s-1SD\s0 file by executing specific standardization
steps along with explicit values for various parameters to control the
standardization behavior, and write out a \s-1SD\s0 file, type:
.PP
.Vb 8
\&    % RDKitStandardizeMolecules.py \-\-methodologyParams "cleanup,yes,
\&      removeFragments,yes,neutralize,yes,canonicalizeTautomer,yes"
\&      \-\-standardizeParams "cleanupRemoveHydrogens,yes,
\&      cleanupDisconnectMetals,yes,cleanupNormalize,yes,
\&      cleanupNormalizeMaxRestarts,200,cleanupReionize,yes,
\&      cleanupAssignStereo,yes,largestFragmentChooserUseAtomCount,yes,
\&      doCanonical,yes,maxTautomers,1000"
\&      \-i Sample.sdf \-o SampleOut.sdf
.Ve
.PP
To standardize molecules in a \s-1CSV SMILES\s0 file, \s-1SMILES\s0 strings in column 1,
name in column 2, and generate output \s-1SD\s0 file, type:
.PP
.Vb 4
\&    % RDKitStandardizeMolecules.py \-\-infileParams 
\&      "smilesDelimiter,comma,smilesTitleLine,yes,smilesColumn,1,
\&      smilesNameColumn,2" \-\-outfileParams "compute2DCoords,yes"
\&      \-i SampleSMILES.csv \-o SampleOut.sdf
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Manish Sud(msud@san.rr.com)
.SH "SEE ALSO"
.IX Header "SEE ALSO"
RDKitConvertFileFormat.py, RDKitEnumerateTautomers.py,
RDKitRemoveDuplicateMolecules.py, RDKitRemoveInvalidMolecules.py,
RDKitRemoveSalts.py, RDKitSearchFunctionalGroups.py, RDKitSearchSMARTS.py
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2022 Manish Sud. All rights reserved.
.PP
The functionality available in this script is implemented using RDKit, an
open source toolkit for cheminformatics developed by Greg Landrum.
.PP
This file is part of MayaChemTools.
.PP
MayaChemTools is free software; you can redistribute it and/or modify it under
the terms of the \s-1GNU\s0 Lesser General Public License as published by the Free
Software Foundation; either version 3 of the License, or (at your option) any
later version.
